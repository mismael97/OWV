#include "mainwindow.h"
#include "SignalSelectionDialog.h"
#include <QTreeWidgetItemIterator>
#include <QFileInfo>
#include <QMessageBox>
#include <QSplitter>
#include <QToolBar>
#include <QStatusBar>
#include <QFileDialog>
#include <QLabel>
#include <QApplication>
#include <QPushButton>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QWidget>
#include <QDir>
#include <QToolButton>
#include <QKeyEvent>
#include <QtConcurrent>
#include <QMenuBar>
#include <QSettings>
#include <QListWidget>
#include <QDialogButtonBox>

// In the constructor, initialize history
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), vcdParser(new VCDParser(this)),
      rtlProcessedForSignalDialog(false)
{
    qRegisterMetaType<VCDSignal>("VCDSignal");
    setWindowTitle("VCD Wave Viewer");
    setMinimumSize(1200, 800);

    // NEW: Setup history file path
    historyFilePath = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation);
    QDir().mkpath(historyFilePath);
    historyFilePath += "/vcd_history.ini";

    createActions();
    setupUI();
    createMenuBar();
    createMainToolbar();
    setupNavigationControls();
    createStatusBar();

    // NEW: Load history and show startup dialog
    loadHistory();
    showStartupDialog();
}

void MainWindow::loadHistory()
{
    QSettings settings(historyFilePath, QSettings::IniFormat);
    recentFiles = settings.value("recentFiles").toStringList();
    
    // Remove non-existent files
    for (int i = recentFiles.size() - 1; i >= 0; --i) {
        if (!QFile::exists(recentFiles[i])) {
            recentFiles.removeAt(i);
        }
    }
    
    saveHistory(); // Save cleaned list
    updateRecentMenu();
}

void MainWindow::saveHistory()
{
    QSettings settings(historyFilePath, QSettings::IniFormat);
    settings.setValue("recentFiles", recentFiles);
}

// NEW: Add file to history
void MainWindow::addToHistory(const QString &filePath)
{
    // Remove if already in list
    recentFiles.removeAll(filePath);
    
    // Add to front
    recentFiles.prepend(filePath);
    
    // Limit to max recent files
    while (recentFiles.size() > MAX_RECENT_FILES) {
        recentFiles.removeLast();
    }
    
    saveHistory();
    updateRecentMenu();
}

// NEW: Update the Recent menu
void MainWindow::updateRecentMenu()
{
    if (!recentMenu) return;
    
    // Clear existing actions
    recentMenu->clear();
    
    if (recentFiles.isEmpty()) {
        QAction *noRecentAction = new QAction("No recent files", this);
        noRecentAction->setEnabled(false);
        recentMenu->addAction(noRecentAction);
    } else {
        for (const QString &filePath : recentFiles) {
            QFileInfo fileInfo(filePath);
            QString displayName = fileInfo.fileName();
            QString fullPath = fileInfo.absoluteFilePath();
            
            // Truncate if too long
            if (displayName.length() > 50) {
                displayName = displayName.left(47) + "...";
            }
            
            QAction *recentAction = new QAction(displayName, this);
            recentAction->setData(fullPath);
            recentAction->setToolTip(fullPath);
            
            connect(recentAction, &QAction::triggered, this, [this, fullPath]() {
                loadVcdFile(fullPath);
            });
            
            recentMenu->addAction(recentAction);
        }
        
        // Add separator and clear history action
        recentMenu->addSeparator();
        QAction *clearHistoryAction = new QAction("Clear History", this);
        connect(clearHistoryAction, &QAction::triggered, this, [this]() {
            recentFiles.clear();
            saveHistory();
            updateRecentMenu();
        });
        recentMenu->addAction(clearHistoryAction);
    }
}

// NEW: Show startup dialog with recent files
void MainWindow::showStartupDialog()
{
    if (recentFiles.isEmpty()) {
        statusLabel->setText("Use File → Open to load a VCD file");
        return;
    }
    
    // Create startup dialog
    QDialog startupDialog(this);
    startupDialog.setWindowTitle("VCD Wave Viewer - Recent Files");
    startupDialog.setMinimumWidth(500);
    
    QVBoxLayout *layout = new QVBoxLayout(&startupDialog);
    
    QLabel *titleLabel = new QLabel("Open Recent VCD File");
    titleLabel->setStyleSheet("font-size: 14pt; font-weight: bold; margin: 10px;");
    layout->addWidget(titleLabel);
    
    QListWidget *fileList = new QListWidget();
    fileList->setAlternatingRowColors(true);
    
    for (const QString &filePath : recentFiles) {
        QFileInfo fileInfo(filePath);
        QString displayText = QString("%1\n%2")
            .arg(fileInfo.fileName())
            .arg(fileInfo.absolutePath());
        
        QListWidgetItem *item = new QListWidgetItem(displayText);
        item->setData(Qt::UserRole, filePath);
        item->setToolTip(filePath);
        fileList->addItem(item);
    }
    
    layout->addWidget(fileList);
    
    QHBoxLayout *buttonLayout = new QHBoxLayout();
    QPushButton *openButton = new QPushButton("Open Selected");
    QPushButton *browseButton = new QPushButton("Browse...");
    QPushButton *cancelButton = new QPushButton("Cancel");
    
    buttonLayout->addWidget(openButton);
    buttonLayout->addWidget(browseButton);
    buttonLayout->addWidget(cancelButton);
    layout->addLayout(buttonLayout);
    
    // Connect signals
    connect(openButton, &QPushButton::clicked, &startupDialog, [&]() {
        QListWidgetItem *currentItem = fileList->currentItem();
        if (currentItem) {
            QString filePath = currentItem->data(Qt::UserRole).toString();
            startupDialog.accept();
            loadVcdFile(filePath);
        }
    });
    
    connect(browseButton, &QPushButton::clicked, &startupDialog, [&]() {
        startupDialog.accept();
        openFile();
    });
    
    connect(cancelButton, &QPushButton::clicked, &startupDialog, &QDialog::reject);
    
    connect(fileList, &QListWidget::itemDoubleClicked, &startupDialog, [&](QListWidgetItem *item) {
        QString filePath = item->data(Qt::UserRole).toString();
        startupDialog.accept();
        loadVcdFile(filePath);
    });
    
    // Show dialog
    if (startupDialog.exec() == QDialog::Rejected) {
        statusLabel->setText("Use File → Open to load a VCD file");
    }
}

MainWindow::~MainWindow()
{
}

void MainWindow::keyPressEvent(QKeyEvent *event)
{
    if (event->key() == Qt::Key_Delete)
    {
        // Let the waveform widget handle deletion if it has focus
        if (waveformWidget->hasFocus() && !waveformWidget->getSelectedItemIndices().isEmpty())
        {
            waveformWidget->removeSelectedSignals();
            event->accept();
        }
        else
        {
            // Fall back to the main window's delete handling
            removeSelectedSignals();
            event->accept();
        }
    }
    else if (event->key() == Qt::Key_A && event->modifiers() & Qt::ControlModifier)
    {
        waveformWidget->selectAllSignals();
        removeSignalsButton->setEnabled(true);
        event->accept();
    }
    else
    {
        QMainWindow::keyPressEvent(event);
    }
}

void MainWindow::createActions()
{
    openAction = new QAction("Open", this);
    openAction->setShortcut(QKeySequence::Open);
    connect(openAction, &QAction::triggered, this, &MainWindow::openFile);

    zoomInAction = new QAction("Zoom In", this);
    zoomInAction->setShortcut(QKeySequence::ZoomIn);
    connect(zoomInAction, &QAction::triggered, this, &MainWindow::zoomIn);

    resetColorsAction = new QAction("Reset Colors", this);
    connect(resetColorsAction, &QAction::triggered, this, &MainWindow::resetSignalColors);

    zoomOutAction = new QAction("Zoom Out", this);
    zoomOutAction->setShortcut(QKeySequence::ZoomOut);
    connect(zoomOutAction, &QAction::triggered, this, &MainWindow::zoomOut);

    zoomFitAction = new QAction("Zoom Fit", this);
    connect(zoomFitAction, &QAction::triggered, this, &MainWindow::zoomFit);

    aboutAction = new QAction("About", this);
    connect(aboutAction, &QAction::triggered, this, &MainWindow::about);

    // Wave menu actions
    defaultColorsAction = new QAction("Default Colors", this);
    connect(defaultColorsAction, &QAction::triggered, this, &MainWindow::resetSignalColors);

    // Bus format actions
    busHexAction = new QAction("Hexadecimal", this);
    busHexAction->setCheckable(true);
    busHexAction->setChecked(true);
    connect(busHexAction, &QAction::triggered, this, &MainWindow::setBusHexFormat);

    busBinaryAction = new QAction("Binary", this);
    busBinaryAction->setCheckable(true);
    connect(busBinaryAction, &QAction::triggered, this, &MainWindow::setBusBinaryFormat);

    busOctalAction = new QAction("Octal", this);
    busOctalAction->setCheckable(true);
    connect(busOctalAction, &QAction::triggered, this, &MainWindow::setBusOctalFormat);

    busDecimalAction = new QAction("Decimal", this);
    busDecimalAction->setCheckable(true);
    connect(busDecimalAction, &QAction::triggered, this, &MainWindow::setBusDecimalFormat);

    // Line thickness actions
    lineThinAction = new QAction("Thin (1px)", this);
    lineThinAction->setCheckable(true);
    connect(lineThinAction, &QAction::triggered, this, &MainWindow::setLineThicknessThin);

    lineMediumAction = new QAction("Medium (2px)", this);
    lineMediumAction->setCheckable(true);
    lineMediumAction->setChecked(true);
    connect(lineMediumAction, &QAction::triggered, this, &MainWindow::setLineThicknessMedium);

    // Signal height adjustment actions
    increaseHeightAction = new QAction("Increase Signal Height", this);
    increaseHeightAction->setShortcut(QKeySequence("Ctrl+Up"));
    connect(increaseHeightAction, &QAction::triggered, this, &MainWindow::increaseSignalHeight);

    decreaseHeightAction = new QAction("Decrease Signal Height", this);
    decreaseHeightAction->setShortcut(QKeySequence("Ctrl+Down"));
    connect(decreaseHeightAction, &QAction::triggered, this, &MainWindow::decreaseSignalHeight);
}

void MainWindow::createMenuBar()
{
    // Create proper menu bar
    QMenuBar *menuBar = this->menuBar();

    // File menu
    QMenu *fileMenu = menuBar->addMenu("File");
    fileMenu->addAction(openAction);
    
    // NEW: Recent files submenu
    recentMenu = fileMenu->addMenu("Recent");  // ADD THIS - make sure to declare recentMenu in .h
    fileMenu->addSeparator();

    // Edit menu (empty for now)
    QMenu *editMenu = menuBar->addMenu("Edit");

    // View menu
    QMenu *viewMenu = menuBar->addMenu("View");
    viewMenu->addAction(zoomInAction);
    viewMenu->addAction(zoomOutAction);
    viewMenu->addAction(zoomFitAction);

    // Workspace menu (empty for now)
    QMenu *workspaceMenu = menuBar->addMenu("Workspace");

    // Wave menu with submenus
    QMenu *waveMenu = menuBar->addMenu("Wave");
    waveMenu->addAction(increaseHeightAction);
    waveMenu->addAction(decreaseHeightAction);
    waveMenu->addSeparator();

    // Help menu
    QMenu *helpMenu = menuBar->addMenu("Help");
    helpMenu->addAction(aboutAction);

    // Signal colors submenu
    QMenu *signalColorsMenu = waveMenu->addMenu("Signal Colors");
    signalColorsMenu->addAction(defaultColorsAction);

    // Bus format submenu
    busFormatMenu = waveMenu->addMenu("Bus Format");
    busFormatMenu->addAction(busHexAction);
    busFormatMenu->addAction(busBinaryAction);
    busFormatMenu->addAction(busOctalAction);
    busFormatMenu->addAction(busDecimalAction);

    // Line thickness submenu
    lineThicknessMenu = waveMenu->addMenu("Line Thickness");
    lineThicknessMenu->addAction(lineThinAction);
    lineThicknessMenu->addAction(lineMediumAction);
}

void MainWindow::createMainToolbar()
{
    // Create main toolbar that appears below the menu bar
    mainToolBar = addToolBar("Main Toolbar");
    mainToolBar->setObjectName("MainToolbar");
    mainToolBar->setMovable(false);
    mainToolBar->setIconSize(QSize(16, 16));

    // Search field
    QLabel *searchLabel = new QLabel("Search:");
    searchField = new QLineEdit();
    searchField->setPlaceholderText("Search signals...");
    searchField->setMaximumWidth(200);
    searchField->setClearButtonEnabled(true);

    // Connect search field to waveform widget search functionality
    connect(searchField, &QLineEdit::textChanged, this, [this](const QString &text)
            { waveformWidget->searchSignals(text); });

    // Zoom controls
    QAction *zoomInToolbarAction = new QAction("🔍+", this);
    zoomInToolbarAction->setToolTip("Zoom In");
    connect(zoomInToolbarAction, &QAction::triggered, this, &MainWindow::zoomIn);

    QAction *zoomOutToolbarAction = new QAction("🔍-", this);
    zoomOutToolbarAction->setToolTip("Zoom Out");
    connect(zoomOutToolbarAction, &QAction::triggered, this, &MainWindow::zoomOut);

    QAction *zoomFitToolbarAction = new QAction("⤢ Fit", this);
    zoomFitToolbarAction->setToolTip("Zoom to Fit");
    connect(zoomFitToolbarAction, &QAction::triggered, this, &MainWindow::zoomFit);

    // Add widgets to toolbar
    mainToolBar->addWidget(searchLabel);
    mainToolBar->addWidget(searchField);
    mainToolBar->addSeparator();

    // Zoom controls
    mainToolBar->addAction(zoomInToolbarAction);
    mainToolBar->addAction(zoomOutToolbarAction);
    mainToolBar->addAction(zoomFitToolbarAction);

    // Add some spacing and stretch
    mainToolBar->addSeparator();
    QWidget *spacer = new QWidget();
    spacer->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    mainToolBar->addWidget(spacer);
}

void MainWindow::increaseSignalHeight()
{
    waveformWidget->setSignalHeight(waveformWidget->getSignalHeight() + 2);
    statusLabel->setText(QString("Signal height increased to %1").arg(waveformWidget->getSignalHeight()));
}

void MainWindow::decreaseSignalHeight()
{
    waveformWidget->setSignalHeight(waveformWidget->getSignalHeight() - 2);
    statusLabel->setText(QString("Signal height decreased to %1").arg(waveformWidget->getSignalHeight()));
}

void MainWindow::resetSignalColors()
{
    waveformWidget->resetSignalColors();
}

void MainWindow::setLineThicknessThin()
{
    waveformWidget->setLineWidth(1);
    updateLineThicknessActions();
}

void MainWindow::setLineThicknessMedium()
{
    waveformWidget->setLineWidth(2);
    updateLineThicknessActions();
}

void MainWindow::updateLineThicknessActions()
{
    lineThinAction->setChecked(false);
    lineMediumAction->setChecked(false);

    int currentWidth = waveformWidget->getLineWidth();
    if (currentWidth == 1)
        lineThinAction->setChecked(true);
    else if (currentWidth == 2)
        lineMediumAction->setChecked(true);
}

void MainWindow::createStatusBar()
{
    statusLabel = new QLabel("Ready");
    statusBar()->addWidget(statusLabel);

    timeLabel = new QLabel("Time: 0");
    statusBar()->addPermanentWidget(timeLabel);
}

void MainWindow::setupUI()
{
    // Create central widget with waveform
    QWidget *centralWidget = new QWidget();
    QVBoxLayout *centralLayout = new QVBoxLayout(centralWidget);
    centralLayout->setContentsMargins(0, 0, 0, 0);
    centralLayout->setSpacing(0);

    // Create waveform widget
    waveformWidget = new WaveformWidget();
    connect(waveformWidget, &WaveformWidget::timeChanged,
            this, &MainWindow::updateTimeDisplay);
    connect(waveformWidget, &WaveformWidget::itemSelected, this, [this](int index)
            {
    // Enable/disable remove button based on selection
    removeSignalsButton->setEnabled(index >= 0);
    
    // Update navigation buttons based on new selection
    updateNavigationButtons(); });

    // === BOTTOM CONTROLS ===
    QWidget *bottomControls = new QWidget();
    QHBoxLayout *bottomLayout = new QHBoxLayout(bottomControls);
    bottomLayout->setContentsMargins(10, 5, 10, 5);

    addSignalsButton = new QPushButton("+ Add Signals");
    removeSignalsButton = new QPushButton("🗑️");

    addSignalsButton->setStyleSheet("QPushButton { padding: 8px; font-weight: bold; background-color: #4CAF50; color: white; }");
    removeSignalsButton->setStyleSheet("QPushButton { padding: 8px; font-weight: bold; background-color: #f44336; color: white; }");
    removeSignalsButton->setEnabled(false);
    removeSignalsButton->setToolTip("Remove selected signal (Delete)");

    connect(addSignalsButton, &QPushButton::clicked, this, &MainWindow::showAddSignalsDialog);
    connect(removeSignalsButton, &QPushButton::clicked, this, &MainWindow::removeSelectedSignals);

    bottomLayout->addWidget(addSignalsButton);
    bottomLayout->addWidget(removeSignalsButton);
    bottomLayout->addStretch();

    centralLayout->addWidget(waveformWidget, 1);
    centralLayout->addWidget(bottomControls);

    setCentralWidget(centralWidget);
}

void MainWindow::showAddSignalsDialog()
{
    if (!vcdParser)
        return;

    int signalCount = vcdParser->getSignals().size();

    // Show immediate feedback for large files
    if (signalCount > 10000)
    {
        statusLabel->setText(QString("Loading signal selection dialog (%1 signals)...").arg(signalCount));
        QApplication::processEvents();

        // Use a simple message box for very large files
        if (signalCount > 50000)
        {
            QMessageBox::information(this, "Large File",
                                     QString("This file contains %1 signals.\n\n"
                                             "The signal selection will load in batches for better performance.\n"
                                             "Use the search filter to find specific signals quickly.")
                                         .arg(signalCount));
        }
    }

    SignalSelectionDialog dialog(this);

    // NEW: Set up RTL processing for signal dialog
    dialog.setRtlProcessingInfo(this, currentVcdFilePath, rtlProcessedForSignalDialog, tempVcdFilePathForSignalDialog);

    // Get current signals
    QList<VCDSignal> currentSignals;
    for (int i = 0; i < waveformWidget->getItemCount(); i++)
    {
        const DisplayItem *item = waveformWidget->getItem(i);
        if (item && item->type == DisplayItem::Signal)
        {
            currentSignals.append(item->signal.signal);
        }
    }

    // Set signals and show dialog
    dialog.setAvailableSignals(vcdParser->getSignals(), currentSignals);

    if (dialog.exec() == QDialog::Accepted)
    {
        QList<VCDSignal> newSignalsToAdd = dialog.getSelectedSignals();
        if (!newSignalsToAdd.isEmpty())
        {
            statusLabel->setText(QString("Loading %1 signals...").arg(newSignalsToAdd.size()));
            QApplication::processEvents();

            // Get current cursor position from waveform widget
            int cursorIndex = waveformWidget->getSignalCursorIndex();
            
            if (cursorIndex >= 0) {
                // Insert new signals at cursor position
                waveformWidget->insertSignalsAtCursor(newSignalsToAdd, cursorIndex);
                statusLabel->setText(QString("Added %1 signal(s) at cursor position").arg(newSignalsToAdd.size()));
            } else {
                // Default behavior: append to end
                QList<VCDSignal> allSignalsToDisplay = currentSignals;
                allSignalsToDisplay.append(newSignalsToAdd);
                waveformWidget->setVisibleSignals(allSignalsToDisplay);
                statusLabel->setText(QString("Added %1 signal(s) at the end").arg(newSignalsToAdd.size()));
            }

            // Update status
            int displayedCount = 0;
            for (int i = 0; i < waveformWidget->getItemCount(); i++)
            {
                const DisplayItem *item = waveformWidget->getItem(i);
                if (item && item->type == DisplayItem::Signal)
                {
                    displayedCount++;
                }
            }

            statusLabel->setText(QString("%1 signal(s) displayed").arg(displayedCount));
            removeSignalsButton->setEnabled(false);
        }
    }

    // REMOVED: Don't clean up temp file here - keep it for the session
    // if (QFile::exists(tempVcdFilePathForSignalDialog)) {
    //     QFile::remove(tempVcdFilePathForSignalDialog);
    // }
    // rtlProcessedForSignalDialog = false; // Don't reset this either
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    // Clean up signal dialog temp file when application closes
    if (QFile::exists(tempVcdFilePathForSignalDialog)) {
        QFile::remove(tempVcdFilePathForSignalDialog);
        qDebug() << "Cleaned up signal dialog temp file:" << tempVcdFilePathForSignalDialog;
    }
    
    QMainWindow::closeEvent(event);
}

void MainWindow::removeSelectedSignals()
{
    // Check if there are any selected items in the waveform widget
    if (!waveformWidget->getSelectedItemIndices().isEmpty())
    {
        waveformWidget->removeSelectedSignals();
        removeSignalsButton->setEnabled(false);

        // Count only signals for display (not spaces)
        int signalCount = 0;
        for (int i = 0; i < waveformWidget->getItemCount(); i++)
        {
            const DisplayItem *item = waveformWidget->getItem(i);
            if (item && item->type == DisplayItem::Signal)
            {
                signalCount++;
            }
        }

        statusLabel->setText(QString("%1 signal(s) displayed").arg(signalCount));
    }
}

void MainWindow::loadDefaultVcdFile()
{
    QString defaultPath = "C:/Users/mismael/Desktop/OWV/test.vcd";

    if (QFile::exists(defaultPath))
    {
        loadVcdFile(defaultPath);
    }
    else
    {
        statusLabel->setText("Default VCD file not found. Use File → Open to load a VCD file.");
        qDebug() << "Default VCD file not found:" << defaultPath;
    }
}

// Update openFile to handle the new flow
void MainWindow::openFile()
{
    QString filename = QFileDialog::getOpenFileName(
        this, "Open VCD File", "", "VCD Files (*.vcd)");

    if (!filename.isEmpty())
    {
        loadVcdFile(filename);
    }
}

void MainWindow::loadVcdFile(const QString &filename)
{
    // NEW: Add to history
    addToHistory(filename);
    
    // NEW: Clean up previous temp files when loading a new VCD file
    if (QFile::exists(tempVcdFilePathForSignalDialog)) {
        QFile::remove(tempVcdFilePathForSignalDialog);
        qDebug() << "Cleaned up previous signal dialog temp file:" << tempVcdFilePathForSignalDialog;
    }
    
    // Reset RTL processing state for the new file
    rtlProcessedForSignalDialog = false;
    
    // Store the original VCD file path
    currentVcdFilePath = filename;
    
    // Don't check for RTL during file loading - only in signal dialog
    QString vcdToLoad = filename;
    
    // Continue with VCD loading...
    statusBar()->clearMessage();

    // Create and show progress bar in status bar
    QProgressBar *progressBar = new QProgressBar();
    progressBar->setRange(0, 0); // Indeterminate progress (spinning)
    progressBar->setMaximumWidth(200);
    progressBar->setTextVisible(false);
    statusBar()->addPermanentWidget(progressBar);

    statusLabel->setText("Loading VCD file...");

    // Disable UI during loading to prevent user interaction
    setEnabled(false);
    QApplication::processEvents(); // Force UI update

    // Use QtConcurrent to run parsing in background thread
    QFuture<bool> parseFuture = QtConcurrent::run([this, vcdToLoad]()
                                                  { return vcdParser->parseHeaderOnly(vcdToLoad); });

    // Create a watcher to handle completion
    QFutureWatcher<bool> *watcher = new QFutureWatcher<bool>(this);
    connect(watcher, &QFutureWatcher<bool>::finished, this, [this, progressBar, watcher, vcdToLoad]()
            {
        bool success = watcher->result();
        
        // Re-enable UI
        setEnabled(true);
        
        // Remove progress bar
        statusBar()->removeWidget(progressBar);
        delete progressBar;
        watcher->deleteLater();
        
        if (success) {
            QString statusMessage = QString("Loaded: %1 (%2 signals)").arg(QFileInfo(vcdToLoad).fileName()).arg(vcdParser->getSignals().size());
            statusLabel->setText(statusMessage);

            // Pass parser to waveform widget but don't load all signals
            waveformWidget->setVcdData(vcdParser);

            // Clear any existing signals from previous file
            waveformWidget->setVisibleSignals(QList<VCDSignal>());
            
            // NEW: Update window title to show current file
            setWindowTitle(QString("VCD Wave Viewer - %1").arg(QFileInfo(vcdToLoad).fileName()));
        } else {
            QMessageBox::critical(this, "Error",
                                  "Failed to parse VCD file: " + vcdParser->getError());
            statusLabel->setText("Ready");
        } });

    watcher->setFuture(parseFuture);
}

void MainWindow::zoomIn()
{
    waveformWidget->zoomIn();
}

void MainWindow::zoomOut()
{
    waveformWidget->zoomOut();
}

void MainWindow::zoomFit()
{
    waveformWidget->zoomFit();
}

void MainWindow::updateTimeDisplay(int time)
{
    timeLabel->setText(QString("Time: %1").arg(time));
}

void MainWindow::about()
{
    QMessageBox::about(this, "About VCD Wave Viewer",
                       "VCD Wave Viewer\n\n"
                       "A professional waveform viewer for Value Change Dump (VCD) files.\n"
                       "Built with Qt C++\n\n"
                       "Features:\n"
                       "- Unified signal names and waveform display\n"
                       "- Dark theme\n"
                       "- Drag to reorder signals\n"
                       "- Professional signal selection dialog\n"
                       "- Mouse wheel navigation");
}

void MainWindow::toggleBusDisplayFormat()
{
    if (sender() == busHexAction)
    {
        waveformWidget->setBusDisplayFormat(WaveformWidget::Hex);
        busHexAction->setChecked(true);
        busBinaryAction->setChecked(false);
    }
    else if (sender() == busBinaryAction)
    {
        waveformWidget->setBusDisplayFormat(WaveformWidget::Binary);
        busHexAction->setChecked(false);
        busBinaryAction->setChecked(true);
    }
}

void MainWindow::setBusHexFormat()
{
    waveformWidget->setBusDisplayFormat(WaveformWidget::Hex);
    updateBusFormatActions();
}

void MainWindow::setBusBinaryFormat()
{
    waveformWidget->setBusDisplayFormat(WaveformWidget::Binary);
    updateBusFormatActions();
}

void MainWindow::setBusOctalFormat()
{
    waveformWidget->setBusDisplayFormat(WaveformWidget::Octal);
    updateBusFormatActions();
}

void MainWindow::setBusDecimalFormat()
{
    waveformWidget->setBusDisplayFormat(WaveformWidget::Decimal);
    updateBusFormatActions();
}

void MainWindow::updateBusFormatActions()
{
    busHexAction->setChecked(false);
    busBinaryAction->setChecked(false);
    busOctalAction->setChecked(false);
    busDecimalAction->setChecked(false);

    switch (waveformWidget->getBusDisplayFormat())
    {
    case WaveformWidget::Hex:
        busHexAction->setChecked(true);
        break;
    case WaveformWidget::Binary:
        busBinaryAction->setChecked(true);
        break;
    case WaveformWidget::Octal:
        busOctalAction->setChecked(true);
        break;
    case WaveformWidget::Decimal:
        busDecimalAction->setChecked(true);
        break;
    }
}

void MainWindow::setupNavigationControls()
{
    // Create navigation controls
    QWidget *navWidget = new QWidget();
    QHBoxLayout *navLayout = new QHBoxLayout(navWidget);
    navLayout->setContentsMargins(5, 0, 5, 0);
    navLayout->setSpacing(3); // Reduced spacing between widgets

    QLabel *navLabel = new QLabel("Navigate:");
    navigationModeCombo = new QComboBox();
    QFont boldFont;
    boldFont.setWeight(QFont::Bold);

    navigationModeCombo->addItem("⇄");
    navigationModeCombo->addItem("↱");
    navigationModeCombo->addItem("↳"); 

    // Set the font for each item
    navigationModeCombo->setItemData(0, boldFont, Qt::FontRole);
    navigationModeCombo->setItemData(1, boldFont, Qt::FontRole);
    navigationModeCombo->setItemData(2, boldFont, Qt::FontRole);
    
    // Make combo box smaller
    navigationModeCombo->setMaximumWidth(60);
    navigationModeCombo->setMaximumHeight(22);

    // Create smaller prev/next buttons
    prevValueButton = new QPushButton("◀");
    nextValueButton = new QPushButton("▶");
    
    // Set smaller button sizes
    prevValueButton->setFixedSize(22, 22);
    nextValueButton->setFixedSize(22, 22);
    
    // Set smaller font for buttons
    QFont smallFont = prevValueButton->font();
    smallFont.setPointSize(8);
    prevValueButton->setFont(smallFont);
    nextValueButton->setFont(smallFont);

    prevValueButton->setEnabled(false);
    nextValueButton->setEnabled(false);

    // Create time input field
    QLabel *timeLabel = new QLabel("Time:");
    QLineEdit *timeInput = new QLineEdit();
    
    // Set initial placeholder with current time (start with 0)
    timeInput->setPlaceholderText("Time: 0");
    
    timeInput->setMaximumWidth(80); // Slightly wider to fit "Time: 1234"
    timeInput->setMaximumHeight(22);
    
    // Set validator to accept only numbers
    QIntValidator *validator = new QIntValidator(0, 1000000000, this);
    timeInput->setValidator(validator);

    // Connect time input - when Enter is pressed, move cursor to that time
    connect(timeInput, &QLineEdit::returnPressed, this, [this, timeInput]() {
        bool ok;
        int time = timeInput->text().toInt(&ok);
        if (ok) {
            // Move cursor to the specified time
            waveformWidget->navigateToTime(time);
            // Update the time display
            updateTimeDisplay(time);
            // Clear the input field and immediately update placeholder
            timeInput->clear();
            timeInput->clearFocus(); // Remove focus so placeholder is visible
            
            // Force update the placeholder with the new time immediately
            QString timeText = QString("Time: %1").arg(time);
            timeInput->setPlaceholderText(timeText);
        }
    });

    // Connect to update the placeholder text with YELLOW TIMELINE CURSOR time
    connect(waveformWidget, &WaveformWidget::cursorTimeChanged, this, [timeInput](int time) {
        // Always update the placeholder to match the cursor time
        QString timeText = QString("Time: %1").arg(time);
        timeInput->setPlaceholderText(timeText);
    });

    // FIX: Use simpler connection syntax
    connect(navigationModeCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(onNavigationModeChanged(int)));
    connect(prevValueButton, &QPushButton::clicked, this, &MainWindow::onPrevValueClicked);
    connect(nextValueButton, &QPushButton::clicked, this, &MainWindow::onNextValueClicked);

    navLayout->addWidget(navLabel);
    navLayout->addWidget(navigationModeCombo);
    navLayout->addWidget(prevValueButton);
    navLayout->addWidget(nextValueButton);
    navLayout->addWidget(timeLabel);
    navLayout->addWidget(timeInput);
    navLayout->addStretch();

    // Add to main toolbar
    mainToolBar->addWidget(navWidget);
}


void MainWindow::onNavigationModeChanged(int index)
{
    // Only 3 modes now: 0=ValueChange, 1=SignalRise, 2=SignalFall
    if (index >= 0 && index <= 2) {
        waveformWidget->setNavigationMode(static_cast<WaveformWidget::NavigationMode>(index));
        updateNavigationButtons();
    }
}

void MainWindow::onPrevValueClicked()
{
    waveformWidget->navigateToPreviousEvent();
    updateNavigationButtons();
}

void MainWindow::onNextValueClicked()
{
    waveformWidget->navigateToNextEvent();
    updateNavigationButtons();
}

void MainWindow::updateNavigationButtons()
{
    bool hasSelection = !waveformWidget->getSelectedItemIndices().isEmpty();
    
    if (hasSelection) {
        bool hasPrev = waveformWidget->hasPreviousEvent();
        bool hasNext = waveformWidget->hasNextEvent();

        prevValueButton->setEnabled(hasPrev);
        nextValueButton->setEnabled(hasNext);
        
        qDebug() << "Navigation buttons - HasPrev:" << hasPrev << "HasNext:" << hasNext;
    } else {
        prevValueButton->setEnabled(false);
        nextValueButton->setEnabled(false);
    }
}

bool MainWindow::runVcdPortMapperForSignalDialog(const QString &inputVcd, const QString &outputVcd, const QString &rtlDir)
{
    // Get the path to the Python script
    QString pythonScript = QCoreApplication::applicationDirPath() + "/vcd_port_mapper.py";
    
    // If script doesn't exist in application dir, try current dir
    if (!QFile::exists(pythonScript)) {
        pythonScript = "vcd_port_mapper.py";
    }
    
    if (!QFile::exists(pythonScript)) {
        qDebug() << "VCD port mapper script not found:" << pythonScript;
        return false;
    }

    // Convert paths to absolute paths to avoid any relative path issues
    QString absInputVcd = QFileInfo(inputVcd).absoluteFilePath();
    QString absOutputVcd = QFileInfo(outputVcd).absoluteFilePath();
    QString absRtlDir = QFileInfo(rtlDir).absoluteFilePath();
    QString absPythonScript = QFileInfo(pythonScript).absoluteFilePath();

    qDebug() << "=== VCD PORT MAPPER EXECUTION ===";
    qDebug() << "Python script:" << absPythonScript;
    qDebug() << "Input VCD:" << absInputVcd;
    qDebug() << "Output VCD:" << absOutputVcd;
    qDebug() << "RTL Directory:" << absRtlDir;
    qDebug() << "RTL Directory exists:" << QDir(absRtlDir).exists();
    
    // Check if RTL directory exists and has files
    QDir rtlDirectory(absRtlDir);
    QStringList rtlFiles = rtlDirectory.entryList(QStringList() << "*.v" << "*.sv", QDir::Files);
    qDebug() << "RTL files found:" << rtlFiles.size();
    if (rtlFiles.size() > 0) {
        qDebug() << "First few RTL files:" << rtlFiles.mid(0, 5);
    }

    // Prepare the command - use absolute paths
    QStringList arguments;
    arguments << absPythonScript << absInputVcd << "-o" << absOutputVcd << "-r" << absRtlDir;
    
    qDebug() << "Command: python" << arguments;
    
    QProcess process;
    process.setProcessChannelMode(QProcess::MergedChannels); // Merge stdout and stderr
    
    // Connect to readyRead signal to capture output in real-time
    QObject::connect(&process, &QProcess::readyRead, [&process]() {
        QByteArray output = process.readAll();
        qDebug() << "Python output:" << output.trimmed();
    });
    
    process.start("python", arguments);
    
    if (!process.waitForStarted(5000)) {
        qDebug() << "Failed to start VCD port mapper process";
        qDebug() << "Error:" << process.errorString();
        return false;
    }
    
    qDebug() << "Process started successfully";
    
    if (!process.waitForFinished(60000)) { // 60 second timeout
        qDebug() << "VCD port mapper timed out";
        process.kill();
        return false;
    }
    
    int exitCode = process.exitCode();
    QByteArray allOutput = process.readAll();
    
    qDebug() << "Process finished with exit code:" << exitCode;
    qDebug() << "Final output:" << allOutput.trimmed();
    
    if (exitCode != 0) {
        qDebug() << "VCD port mapper failed with exit code:" << exitCode;
        return false;
    }
    
    // Verify the output file was created
    if (QFile::exists(absOutputVcd)) {
        QFile outputFile(absOutputVcd);
        if (outputFile.open(QIODevice::ReadOnly)) {
            qDebug() << "Output file created successfully, size:" << outputFile.size() << "bytes";
            outputFile.close();
            
            // Quick check if the file has the expected content
            if (outputFile.size() > 100) { // Reasonable minimum size
                qDebug() << "VCD port mapper completed successfully";
                return true;
            } else {
                qDebug() << "Output file seems too small, might be empty";
                return false;
            }
        }
    } else {
        qDebug() << "Output file was not created";
        return false;
    }
    
    qDebug() << "VCD port mapper completed successfully";
    return true;
}

QString MainWindow::findRtlDirectoryForSignalDialog(const QString &vcdFile)
{
    QFileInfo vcdInfo(vcdFile);
    QDir vcdDir = vcdInfo.dir();
    
    qDebug() << "=== FINDING RTL DIRECTORY ===";
    qDebug() << "VCD file:" << vcdFile;
    qDebug() << "VCD directory:" << vcdDir.absolutePath();
    
    // First, check if there's a directory that contains RTL files
    // We'll look for directories that have Verilog/SystemVerilog files
    
    QDir parentDir = vcdDir;
    
    // Look in the VCD file directory and its subdirectories
    QStringList searchDirs;
    searchDirs << vcdDir.absolutePath(); // Current directory
    
    // Add all immediate subdirectories
    QFileInfoList subdirs = vcdDir.entryInfoList(QDir::Dirs | QDir::NoDotAndDotDot);
    for (const QFileInfo &subdir : subdirs) {
        searchDirs << subdir.absoluteFilePath();
    }
    
    qDebug() << "Searching in directories:" << searchDirs;
    
    for (const QString &searchDir : searchDirs) {
        QDir dir(searchDir);
        QStringList rtlFiles = dir.entryList(QStringList() << "*.v" << "*.sv", QDir::Files);
        
        if (!rtlFiles.isEmpty()) {
            qDebug() << "Found RTL directory:" << searchDir << "with" << rtlFiles.size() << "RTL files";
            qDebug() << "Sample RTL files:" << rtlFiles.mid(0, 3); // Show first 3 files
            return searchDir;
        } else {
            qDebug() << "No RTL files found in:" << searchDir;
        }
    }
    
    qDebug() << "No RTL directory found automatically";
    return "";
}

bool MainWindow::processVcdWithRtlForSignalDialog(const QString &vcdFile)
{
    QString rtlDir = findRtlDirectoryForSignalDialog(vcdFile);
    if (rtlDir.isEmpty()) {
        qDebug() << "No RTL directory found for signal dialog";
        return false;
    }
    
    // Create temp VCD file path for signal dialog
    QFileInfo fileInfo(vcdFile);
    tempVcdFilePathForSignalDialog = fileInfo.path() + "/" + fileInfo.completeBaseName() + "_temp_signal_dialog.vcd";
    
    qDebug() << "Processing VCD with RTL for signal dialog:";
    qDebug() << "  Input VCD:" << vcdFile;
    qDebug() << "  RTL Dir:" << rtlDir;
    qDebug() << "  Output VCD:" << tempVcdFilePathForSignalDialog;
    
    bool success = runVcdPortMapperForSignalDialog(vcdFile, tempVcdFilePathForSignalDialog, rtlDir);
    
    if (success) {
        // Verify the output file was created
        if (QFile::exists(tempVcdFilePathForSignalDialog)) {
            QFile file(tempVcdFilePathForSignalDialog);
            if (file.open(QIODevice::ReadOnly)) {
                qDebug() << "RTL processing successful, output file size:" << file.size() << "bytes";
                file.close();
            }
        }
    } else {
        qDebug() << "RTL processing failed";
    }
    
    return success;
}

void MainWindow::showRtlDirectoryDialogForSignalDialog()
{
    QString rtlDir = QFileDialog::getExistingDirectory(this, "Select RTL Directory for Signal Filtering",
                                                      QFileInfo(currentVcdFilePath).dir().path());
    
    if (!rtlDir.isEmpty()) {
        // Reprocess VCD with the new RTL directory for signal dialog
        if (runVcdPortMapperForSignalDialog(currentVcdFilePath, tempVcdFilePathForSignalDialog, rtlDir)) {
            rtlProcessedForSignalDialog = true;
        }
    }
}

// You can add this check somewhere in your initialization
void checkPythonAvailability()
{
    QProcess process;
    process.start("python", QStringList() << "--version");
    if (process.waitForFinished(5000)) {
        QByteArray output = process.readAll();
        qDebug() << "Python version:" << output.trimmed();
    } else {
        qDebug() << "Python not found or not working";
    }
    
    // Also check python3
    process.start("python3", QStringList() << "--version");
    if (process.waitForFinished(5000)) {
        QByteArray output = process.readAll();
        qDebug() << "Python3 version:" << output.trimmed();
    }
}#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QTreeWidget>
#include <QSplitter>
#include <QToolBar>
#include <QStatusBar>
#include <QFileDialog>
#include <QMessageBox>
#include <QScrollBar>
#include <QLabel>
#include <QPushButton>
#include <QHBoxLayout>
#include <QWidget>
#include <QListWidget>
#include <QListWidgetItem>
#include <QDialog>
#include <QDialogButtonBox>
#include <QKeyEvent>
#include <QComboBox>
#include "vcdparser.h"
#include "waveformwidget.h"
#include <QProcess>

class SignalSelectionDialog;

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

    // NEW: Make these methods public so SignalSelectionDialog can access them
    bool hasRtlDirectoryForSignalDialog();
    QString findRtlDirectoryForSignalDialog(const QString &vcdFile);
    bool processVcdWithRtlForSignalDialog(const QString &vcdFile);
    bool runVcdPortMapperForSignalDialog(const QString &inputVcd, const QString &outputVcd, const QString &rtlDir);
    void showRtlDirectoryDialogForSignalDialog();

protected:
    void keyPressEvent(QKeyEvent *event) override;
    void closeEvent(QCloseEvent *event) override; // ADD override

private slots:
    void setLineThicknessThin();
    void setLineThicknessMedium();
    void openFile();
    void zoomIn();
    void zoomOut();
    void zoomFit();
    void updateTimeDisplay(int time);
    void about();
    void showAddSignalsDialog();
    void removeSelectedSignals();
    void toggleBusDisplayFormat();
    void resetSignalColors();
    void setBusHexFormat();
    void setBusBinaryFormat();
    void setBusOctalFormat();
    void setBusDecimalFormat();
    void updateBusFormatActions();
    void increaseSignalHeight();
    void decreaseSignalHeight();

    // NEW SLOTS:
    void onNavigationModeChanged(int index);
    void onPrevValueClicked();
    void onNextValueClicked();

private:
    void loadHistory();
    void saveHistory();
    void addToHistory(const QString &filePath);
    void updateRecentMenu();
    void showStartupDialog();

    QString historyFilePath;
    QStringList recentFiles;
    const int MAX_RECENT_FILES = 10;

    QMenu *recentMenu; // ADD THIS

    QString currentVcdFilePath;

    // NEW: Track RTL processing state for signal dialog
    bool rtlProcessedForSignalDialog;
    QString tempVcdFilePathForSignalDialog;

    bool processVcdWithRtl(const QString &vcdFile);
    QString findRtlDirectory(const QString &vcdFile);
    bool runVcdPortMapper(const QString &inputVcd, const QString &outputVcd, const QString &rtlDir);

    void showRtlDirectoryDialog();
    void createToolbarBelowMenu();
    void updateLineThicknessActions();
    QAction *increaseHeightAction;
    QAction *decreaseHeightAction;

    QMenu *lineThicknessMenu;
    QAction *lineThinAction;
    QAction *lineMediumAction;
    QAction *lineThickAction;
    // Wave menu actions
    QMenu *waveMenu;
    QAction *defaultColorsAction;
    QMenu *busFormatMenu;
    QAction *busHexAction;
    QAction *busBinaryAction;
    QAction *busOctalAction;
    QAction *busDecimalAction;
    QAction *resetColorsAction;
    void createActions();
    void createToolBar();
    void createStatusBar();
    void setupUI();
    void loadVcdFile(const QString &filename);
    void loadDefaultVcdFile();

    void createMenuBar();
    void createMainToolbar();
    void setupNavigationControls();
    void updateNavigationButtons();

    // Add these to private section
    QToolBar *mainToolBar;
    QLineEdit *searchField;

    // Navigation controls
    QComboBox *navigationModeCombo;
    QPushButton *prevValueButton;
    QPushButton *nextValueButton;

    // UI Components
    WaveformWidget *waveformWidget;
    QScrollBar *timeScrollBar;

    // Toolbar Actions
    QAction *openAction;
    QAction *zoomInAction;
    QAction *zoomOutAction;
    QAction *zoomFitAction;
    QAction *aboutAction;

    // Bottom controls
    QPushButton *addSignalsButton;
    QPushButton *removeSignalsButton;

    // Status Bar
    QLabel *statusLabel;
    QLabel *timeLabel;

    // Data
    VCDParser *vcdParser;
};

#endif // MAINWINDOW_H<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>800</width>
    <height>600</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>MainWindow</string>
  </property>
  <widget class="QWidget" name="centralwidget"/>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>800</width>
     <height>25</height>
    </rect>
   </property>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
 </widget>
 <resources/>
 <connections/>
</ui>
#include "waveformwidget.h"
#include <QScrollBar>
#include <QWheelEvent>
#include <QMouseEvent>
#include <QResizeEvent>
#include <QPaintEvent>
#include <QContextMenuEvent>
#include <QKeyEvent>
#include <QInputDialog>
#include <QApplication>
#include <cmath>

WaveformWidget::WaveformWidget(QWidget *parent)
    : QWidget(parent),
      vcdParser(nullptr),
      timeScale(1.0),
      timeOffset(0),
      signalNamesWidth(250),
      valuesColumnWidth(120),
      timeMarkersHeight(30),
      topMargin(0),
      signalHeight(24), // Only signalHeight remains
      lineWidth(1),
      isDragging(false),
      isDraggingItem(false),
      dragItemIndex(-1),
      dragStartX(0),
      dragStartOffset(0),
      dragStartY(0),
      lastSelectedItem(-1),
      busDisplayFormat(Hex),
      draggingNamesSplitter(false),
      draggingValuesSplitter(false),
      cursorTime(0),
      showCursor(true),
      verticalOffset(0),
      isSearchActive(false),
      signalCursorIndex(-1),  
      showSignalCursor(false), 
      MAX_CACHED_SIGNALS(1000)
{
    qDebug() << "WaveformWidget constructor started";
    setFocusPolicy(Qt::StrongFocus);
    setMouseTracking(true);

    qDebug() << "Creating scrollbars...";

    // In the constructor, update the horizontal scrollbar connection:
    horizontalScrollBar = new QScrollBar(Qt::Horizontal, this);
    connect(horizontalScrollBar, &QScrollBar::valueChanged, [this](int value)
            {
    timeOffset = value;
    update(); });

    // Add vertical scrollbar
    verticalScrollBar = new QScrollBar(Qt::Vertical, this);
    connect(verticalScrollBar, &QScrollBar::valueChanged, [this](int value)
            {
        verticalOffset = value;
        
        update(); });
    qDebug() << "WaveformWidget constructor completed";
}

void WaveformWidget::setVcdData(VCDParser *parser)
{
    vcdParser = parser;
    displayItems.clear();

    // Reset zoom to safe levels when loading new data
    if (timeScale > 100.0 || timeScale < 0.01)
    {
        timeScale = 1.0;
        timeOffset = 0;
    }

    selectedItems.clear();
    lastSelectedItem = -1;

    // Apply zoom fit automatically when VCD data is loaded
    if (vcdParser && vcdParser->getEndTime() > 0)
    {
        zoomFit();
    }
    else
    {
        updateScrollBar();
    }

    update();
}

const DisplayItem *WaveformWidget::getItem(int index) const
{
    if (index >= 0 && index < displayItems.size())
    {
        return &displayItems[index];
    }
    return nullptr;
}

void WaveformWidget::removeSelectedSignals()
{
    if (selectedItems.isEmpty())
        return;

    // Store the current cursor index before removal
    int oldCursorIndex = signalCursorIndex;
    bool cursorWasInSelection = selectedItems.contains(oldCursorIndex);

    // Remove items in reverse order
    QList<int> indices = selectedItems.values();
    std::sort(indices.begin(), indices.end(), std::greater<int>());

    for (int index : indices)
    {
        if (index >= 0 && index < displayItems.size())
        {
            displayItems.removeAt(index);
            
            // Adjust cursor index if we removed items before it
            if (signalCursorIndex > index) {
                signalCursorIndex--;
            }
        }
    }

    selectedItems.clear();
    lastSelectedItem = -1;
    
    // NEW: Update cursor position after deletion
    updateSignalCursorAfterChanges();
    
    update();
    emit itemSelected(-1);
}

void WaveformWidget::selectAllSignals()
{
    selectedItems.clear();
    for (int i = 0; i < displayItems.size(); i++)
    {
        selectedItems.insert(i);
    }
    lastSelectedItem = displayItems.size() - 1;
    update();
    emit itemSelected(selectedItems.isEmpty() ? -1 : *selectedItems.begin());
}

void WaveformWidget::zoomIn()
{
    if (timeScale >= 50.0)
        return;

    // Get mouse position in widget coordinates
    QPoint mousePos = mapFromGlobal(QCursor::pos());
    int waveformStartX = signalNamesWidth + valuesColumnWidth;

    qDebug() << "=== ZOOM IN ===";
    qDebug() << "Mouse pos:" << mousePos;
    qDebug() << "Waveform start X:" << waveformStartX;

    // Only zoom to mouse if it's in the waveform area
    if (mousePos.x() >= waveformStartX && mousePos.y() >= timeMarkersHeight)
    {
        // Calculate mouse position relative to waveform area
        int mouseXInWaveform = mousePos.x() - waveformStartX;

        // The key calculation: what time is currently under the mouse?
        // time = (pixel_position + scroll_offset) / scale
        double timeUnderMouse = (mouseXInWaveform + timeOffset) / timeScale;

        qDebug() << "Mouse in waveform - X:" << mouseXInWaveform;
        qDebug() << "Time under mouse:" << timeUnderMouse;
        qDebug() << "Before - Scale:" << timeScale << "Offset:" << timeOffset;

        // Apply zoom
        double oldScale = timeScale;
        timeScale *= 1.2;
        timeScale = qMin(50.0, timeScale);

        // After zoom, we want the same time to be under the mouse
        // So we adjust the offset: new_offset = time * new_scale - mouse_x
        timeOffset = timeUnderMouse * timeScale - mouseXInWaveform;

        qDebug() << "After - Scale:" << timeScale << "Offset:" << timeOffset;
    }
    else
    {
        // Default zoom (center-based) - keep cursor visible
        double cursorTimeBeforeZoom = cursorTime;
        timeScale = qMin(50.0, timeScale * 1.2);

        // Adjust offset to keep cursor roughly in the same screen position
        int waveformStartX = signalNamesWidth + valuesColumnWidth;
        int viewportWidth = width() - waveformStartX;
        int cursorScreenPos = timeToX(cursorTimeBeforeZoom);
        timeOffset = cursorScreenPos - viewportWidth / 2;

        qDebug() << "Default zoom - New scale:" << timeScale << "Cursor time:" << cursorTimeBeforeZoom;
    }

    updateScrollBar();
    update();
}

void WaveformWidget::zoomOut()
{
    // Calculate the maximum scale allowed (zoom fit level)
    double maxScaleForZoomOut = calculateZoomFitScale();

    // If we're already at or beyond zoom fit level, don't zoom out further
    if (timeScale <= maxScaleForZoomOut)
    {
        // Optional: Snap to exact zoom fit scale
        timeScale = maxScaleForZoomOut;
        updateScrollBar();
        update();
        return;
    }

    // Always use mouse position
    QPoint mousePos = mapFromGlobal(QCursor::pos());
    int waveformStartX = signalNamesWidth + valuesColumnWidth;
    int mouseXInWaveform = mousePos.x() - waveformStartX;

    if (mouseXInWaveform < 0)
        mouseXInWaveform = 0;

    double timeUnderMouse = (mouseXInWaveform + timeOffset) / timeScale;

    double oldScale = timeScale;
    timeScale /= 1.2;

    // Don't zoom out beyond zoom fit level
    timeScale = qMax(maxScaleForZoomOut, timeScale);
    timeScale = qMax(0.1, timeScale); // Still respect absolute minimum

    timeOffset = timeUnderMouse * timeScale - mouseXInWaveform;

    // Clamp offset to prevent negative timeline
    if (timeOffset < 0)
    {
        timeOffset = 0;
    }

    updateScrollBar();
    update();
}

void WaveformWidget::zoomFit()
{
    if (!vcdParser || vcdParser->getEndTime() <= 0)
    {
        timeScale = 1.0;
        timeOffset = 0;
        updateScrollBar();
        update();
        return;
    }

    int availableWidth = width() - signalNamesWidth - valuesColumnWidth - 20;

    // Use the same margins as scrolling - UPDATE THIS LINE:
    const int LEFT_MARGIN = 0;   // -10 time units (negative time)
    const int RIGHT_MARGIN = 10; // 100 time units after end

    int totalTimeRange = vcdParser->getEndTime() + RIGHT_MARGIN - LEFT_MARGIN; // Note: subtract LEFT_MARGIN because it's negative

    if (availableWidth <= 10)
    {
        timeScale = 1.0;
    }
    else if (totalTimeRange <= 0)
    {
        timeScale = 1.0;
    }
    else
    {
        timeScale = static_cast<double>(availableWidth) / totalTimeRange;
    }

    timeScale = qMax(0.001, qMin(1000.0, timeScale));
    timeOffset = 0;

    updateScrollBar();
    update();
}

void WaveformWidget::resetSignalColors()
{
    signalColors.clear();
    update();
}

void WaveformWidget::setBusDisplayFormat(BusFormat format)
{
    busDisplayFormat = format;
    update();
}

void WaveformWidget::drawSignalValuesColumn(QPainter &painter, int cursorTime)
{
    if (!showCursor || cursorTime < 0 || !vcdParser)
        return;

    int valuesColumnStart = signalNamesWidth;

    // Draw values column background
    painter.fillRect(valuesColumnStart, 0, valuesColumnWidth, height(), QColor(0, 0, 0));

    // Draw values splitter
    // painter.fillRect(valuesColumnStart + valuesColumnWidth - 1, 0, 2, height(), QColor(100, 100, 100));

    // Draw pinned header (always visible)
    painter.fillRect(valuesColumnStart, 0, valuesColumnWidth, timeMarkersHeight, QColor(30, 30, 30)); // Value Column | Header Color
    painter.setPen(QPen(Qt::white));
    painter.drawText(valuesColumnStart + 5, timeMarkersHeight - 8, "Value");

    // Set up clipping to exclude pinned areas from scrolling
    painter.setClipRect(valuesColumnStart, timeMarkersHeight, valuesColumnWidth, height() - timeMarkersHeight);

    // FIXED: Use same starting position as names column
    int currentY = timeMarkersHeight - verticalOffset;

    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

        // Skip drawing if item is outside visible area
        if (currentY + itemHeight <= timeMarkersHeight)
        {
            currentY += itemHeight;
            continue;
        }
        if (currentY >= height())
        {
            break;
        }

        // Draw background for this row
        bool isSelected = selectedItems.contains(i);
        bool isSearchMatch = searchResults.contains(i);

        if (isSelected)
        {
            painter.fillRect(valuesColumnStart, currentY, valuesColumnWidth, itemHeight, QColor(60, 60, 90));
        }
        else if (isSearchActive && isSearchMatch)
        {
            painter.fillRect(valuesColumnStart, currentY, valuesColumnWidth, itemHeight, QColor(80, 80, 120, 150));
        }
        else if (i % 2 == 0)
        {
            painter.fillRect(valuesColumnStart, currentY, valuesColumnWidth, itemHeight, QColor(0, 0, 0)); // Value Column | Color 1
        }
        else
        {
            painter.fillRect(valuesColumnStart, currentY, valuesColumnWidth, itemHeight, QColor(0, 0, 0)); // Value Column | Color 2
        }

        if (item.type == DisplayItem::Signal)
        {
            const VCDSignal &signal = item.signal.signal;

            // FIX: Use the signal's fullName to get the value
            QString value = getSignalValueAtTime(signal.fullName, cursorTime);

            // Format the value based on signal type
            QString displayValue;
            if (signal.width > 1)
            {
                displayValue = formatBusValue(value);
            }
            else
            {
                displayValue = value.toUpper();
            }

            // Center text vertically within the item
            QFontMetrics fm(painter.font());
            int textY = currentY + (itemHeight + fm.ascent() - fm.descent()) / 2;

            painter.setPen(QPen(Qt::white));
            painter.drawText(valuesColumnStart + 5, textY, displayValue);
        }

        // Draw horizontal separator
        painter.setPen(QPen(QColor(80, 80, 80)));
        painter.drawLine(valuesColumnStart, currentY + itemHeight,
                         valuesColumnStart + valuesColumnWidth, currentY + itemHeight);

        currentY += itemHeight;
    }

    // Reset clipping
    painter.setClipping(false);
}


void WaveformWidget::drawSignalCursor(QPainter &painter)
{
    if (!showSignalCursor || signalCursorIndex < 0 || signalCursorIndex >= displayItems.size())
        return;

    // Calculate the Y position where the cursor should be drawn
    int cursorY = getItemYPosition(signalCursorIndex) + getItemHeight(signalCursorIndex) - verticalOffset;
    
    // Only draw if cursor is in visible area
    if (cursorY < timeMarkersHeight || cursorY > height())
        return;

    // Draw a yellow horizontal line ONLY in the signal names column
    painter.setPen(QPen(Qt::yellow, 1, Qt::SolidLine));
    painter.drawLine(0, cursorY, signalNamesWidth, cursorY);
    
    // Draw a small triangle or arrow on the left side to indicate insertion point
    QPolygon triangle;
    triangle << QPoint(4, cursorY - 4) 
             << QPoint(14, cursorY) 
             << QPoint(4, cursorY + 4);
    painter.setBrush(QBrush(Qt::yellow));
    painter.drawPolygon(triangle);
    
    // REMOVED: "Insertion Point" text - just the line and triangle are enough
}

void WaveformWidget::paintEvent(QPaintEvent *event)
{
    Q_UNUSED(event)

    // Global safety check - reset if zoom is completely unreasonable
    if (timeScale > 1000.0 || timeScale < 0.001)
    {
        qDebug() << "Global emergency: Resetting unreasonable zoom:" << timeScale;
        timeScale = 1.0;
        timeOffset = 0;
    }

    QPainter painter(this);

    // Fill entire background with dark theme
    painter.fillRect(rect(), QColor(0, 0, 0));

    if (!vcdParser || displayItems.isEmpty())
    {
        painter.fillRect(rect(), QColor(45, 45, 48));
        painter.drawText(rect(), Qt::AlignCenter, "No signals selected");
        return;
    }

    drawSignalNamesColumn(painter);
    drawSignalValuesColumn(painter, cursorTime);
    drawWaveformArea(painter);
    drawTimeCursor(painter);
    drawSignalCursor(painter);  // ADD THIS LINE - Draw the signal cursor
}

void WaveformWidget::drawSignalNamesColumn(QPainter &painter)
{
    // Draw signal names column background
    painter.fillRect(0, 0, signalNamesWidth, height(), QColor(0, 0, 0)); // Signal Name Column | Background color

    // Draw names splitter
    // painter.fillRect(signalNamesWidth - 1, 0, 2, height(), QColor(100, 100, 100));

    // Draw pinned header (always visible)
    painter.fillRect(0, 0, signalNamesWidth, timeMarkersHeight, QColor(30, 30, 30)); // Signal Name Column | Header Color
    painter.setPen(QPen(Qt::white));
    painter.drawText(5, timeMarkersHeight - 8, "Signal Name");

    // Set up clipping to exclude pinned areas from scrolling
    painter.setClipRect(0, timeMarkersHeight, signalNamesWidth, height() - timeMarkersHeight);

    // FIXED: Start drawing signals right below the timeline header
    int currentY = timeMarkersHeight - verticalOffset;

    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

        // Skip drawing if item is completely outside visible area
        if (currentY + itemHeight <= timeMarkersHeight)
        {
            currentY += itemHeight;
            continue;
        }
        if (currentY >= height())
        {
            break;
        }

        // Draw background based on selection and type
        bool isSelected = selectedItems.contains(i);
        bool isSearchMatch = searchResults.contains(i);

        if (isSelected)
        {
            painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(60, 60, 90));
        }
        else if (isSearchActive && isSearchMatch)
        {
            painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(80, 80, 120, 150));
        }
        else if (item.type == DisplayItem::Space)
        {
            painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(80, 160, 80, 120));
        }
        else if (i % 2 == 0)
        {
            painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(0, 0, 0)); // Signal Name Column | Color 1
        }
        else
        {
            painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(0, 0, 0)); // Signal Name Column | Color 2
        }

        // Draw item name with appropriate styling
        if (isSelected)
        {
            painter.setPen(QPen(Qt::white));
        }
        else if (isSearchActive && isSearchMatch)
        {
            painter.setPen(QPen(QColor(200, 200, 255)));
        }
        else if (item.type == DisplayItem::Space)
        {
            painter.setPen(QPen(QColor(150, 255, 150)));
        }
        else
        {
            painter.setPen(QPen(Qt::white));
        }

        QString displayName = item.getName();
        int textIndent = 5;

        // Center text vertically within the item
        QFontMetrics fm(painter.font());
        int textY = currentY + (itemHeight + fm.ascent() - fm.descent()) / 2;

        if (item.type == DisplayItem::Signal)
        {
            // For signals: draw name on left and bit range on right
            const VCDSignal &signal = item.signal.signal;
            int msb = signal.width - 1;
            QString bitRangeText = QString("[%1:0]").arg(msb);
            int bitRangeTextWidth = fm.horizontalAdvance(bitRangeText);

            // Draw signal name
            painter.drawText(textIndent, textY, displayName);

            // Draw bit range at the right end of the column
            int bitRangeX = signalNamesWidth - bitRangeTextWidth - 5; // 5px padding from right edge
            painter.setPen(QPen(QColor(180, 180, 180)));              // Gray color for bit range
            painter.drawText(bitRangeX, textY, bitRangeText);

            // Reset pen color for next items
            if (isSelected)
            {
                painter.setPen(QPen(Qt::white));
            }
            else if (isSearchActive && isSearchMatch)
            {
                painter.setPen(QPen(QColor(200, 200, 255)));
            }
            else if (item.type == DisplayItem::Space)
            {
                painter.setPen(QPen(QColor(150, 255, 150)));
            }
            else
            {
                painter.setPen(QPen(Qt::white));
            }
        }
        else
        {
            // For spaces: just draw the name normally
            painter.drawText(textIndent, textY, displayName);
        }

        // Draw horizontal separator
        painter.setPen(QPen(QColor(80, 80, 80)));
        painter.drawLine(0, currentY + itemHeight, signalNamesWidth, currentY + itemHeight);

        currentY += itemHeight;
    }

    // Reset clipping
    painter.setClipping(false);
}

// void WaveformWidget::drawSignalNamesColumn(QPainter &painter)
// {
//     // Draw signal names column background
//     painter.fillRect(0, 0, signalNamesWidth, height(), QColor(0, 0, 0));

//     // Draw names splitter
//     // painter.fillRect(signalNamesWidth - 1, 0, 2, height(), QColor(100, 100, 100));

//     // Draw pinned header (always visible)
//     painter.fillRect(0, 0, signalNamesWidth, timeMarkersHeight, QColor(30, 30, 30)); // Signal Name Column | Header Color
//     painter.setPen(QPen(Qt::white));
//     painter.drawText(5, timeMarkersHeight - 8, "Signal Name");

//     // Set up clipping to exclude pinned areas from scrolling
//     painter.setClipRect(0, timeMarkersHeight, signalNamesWidth, height() - timeMarkersHeight);

//     // FIXED: Start drawing signals right below the timeline header
//     int currentY = timeMarkersHeight - verticalOffset;

//     for (int i = 0; i < displayItems.size(); i++)
//     {
//         const auto &item = displayItems[i];
//         int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

//         // Skip drawing if item is completely outside visible area
//         if (currentY + itemHeight <= timeMarkersHeight)
//         {
//             currentY += itemHeight;
//             continue;
//         }
//         if (currentY >= height())
//         {
//             break;
//         }

//         // Draw background based on selection and type
//         bool isSelected = selectedItems.contains(i);
//         bool isSearchMatch = searchResults.contains(i);

//         if (isSelected)
//         {
//             painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(60, 60, 90));
//         }
//         else if (isSearchActive && isSearchMatch)
//         {
//             painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(80, 80, 120, 150));
//         }
//         else if (item.type == DisplayItem::Space)
//         {
//             painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(80, 160, 80, 120));
//         }
//         else if (i % 2 == 0)
//         {
//             painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(0, 0, 0)); // Signal Name Column | Color 1
//         }
//         else
//         {
//             painter.fillRect(0, currentY, signalNamesWidth, itemHeight, QColor(0, 0, 0)); // Signal Name Column | Color 2
//         }

//         // Draw item name with appropriate styling
//         if (isSelected)
//         {
//             painter.setPen(QPen(Qt::white));
//         }
//         else if (isSearchActive && isSearchMatch)
//         {
//             painter.setPen(QPen(QColor(200, 200, 255)));
//         }
//         else if (item.type == DisplayItem::Space)
//         {
//             painter.setPen(QPen(QColor(150, 255, 150)));
//         }
//         else
//         {
//             painter.setPen(QPen(Qt::white));
//         }

//         QString displayName = item.getName();
//         int textIndent = 5;

//         // Center text vertically within the item
//         QFontMetrics fm(painter.font());
//         int textY = currentY + (itemHeight + fm.ascent() - fm.descent()) / 2;
//         painter.drawText(textIndent, textY, displayName);

//         // Draw horizontal separator
//         painter.setPen(QPen(QColor(80, 80, 80)));
//         painter.drawLine(0, currentY + itemHeight, signalNamesWidth, currentY + itemHeight);

//         currentY += itemHeight;
//     }

//     // Reset clipping
//     painter.setClipping(false);
// }

void WaveformWidget::drawWaveformArea(QPainter &painter)
{
    int waveformStartX = signalNamesWidth + valuesColumnWidth;

    // Draw pinned timeline background
    painter.fillRect(waveformStartX, 0, width() - waveformStartX, timeMarkersHeight, QColor(30, 30, 30)); // Time Line Column | Header Color

    // Draw grid lines in timeline area
    painter.setPen(QPen(QColor(80, 80, 80), 1, Qt::DotLine));
    int startTime = xToTime(0);
    int endTime = xToTime(width() - waveformStartX);
    int timeStep = calculateTimeStep(startTime, endTime);

    for (int time = (startTime / timeStep) * timeStep; time <= endTime; time += timeStep)
    {
        int x = timeToX(time);
        painter.drawLine(waveformStartX + x, 0, waveformStartX + x, timeMarkersHeight);

        painter.setPen(QPen(Qt::white));
        painter.drawText(waveformStartX + x + 2, timeMarkersHeight - 5, QString::number(time));
        painter.setPen(QPen(QColor(80, 80, 80), 1, Qt::DotLine));
    }

    // Set up clipping for scrollable waveform area (exclude pinned timeline)
    painter.setClipRect(waveformStartX, timeMarkersHeight, width() - waveformStartX, height() - timeMarkersHeight);

    // FIXED: Apply translation that matches the columns
    painter.translate(waveformStartX, timeMarkersHeight - verticalOffset);

    // Draw background for scrollable area - use the full calculated height
    int totalHeight = calculateTotalHeight();
    painter.fillRect(0, 0, width() - waveformStartX, totalHeight, QColor(0, 0, 0));

    if (!displayItems.isEmpty())
    {
        drawSignals(painter);
    }

    // Reset translation and clipping
    painter.translate(-waveformStartX, -timeMarkersHeight + verticalOffset);
    painter.setClipping(false);
}

void WaveformWidget::drawTimeCursor(QPainter &painter)
{
    if (!showCursor || cursorTime < 0)
        return;

    int waveformStartX = signalNamesWidth + valuesColumnWidth;
    int cursorX = timeToX(cursorTime);

    // Only draw if cursor is within visible waveform area
    if (cursorX < 0 || cursorX > (width() - waveformStartX))
    {
        qDebug() << "Cursor outside visible area - Cursor X:" << cursorX << "Waveform width:" << (width() - waveformStartX);
        return;
    }

    // Calculate the height based on actual signals (stop at last signal)
    int totalSignalsHeight = timeMarkersHeight; // Start below timeline

    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;
        totalSignalsHeight += itemHeight;
    }

    // Add some padding at the bottom
    totalSignalsHeight += 10;

    // Don't draw beyond the actual content height
    int drawHeight = qMin(totalSignalsHeight, height());

    qDebug() << "Drawing cursor at X:" << cursorX << "Height:" << drawHeight;

    // Draw vertical cursor line from timeline area to the last signal
    painter.setPen(QPen(Qt::yellow, 2, Qt::DashLine));
    painter.drawLine(waveformStartX + cursorX, timeMarkersHeight, waveformStartX + cursorX, drawHeight);
}

void WaveformWidget::drawSignals(QPainter &painter)
{
    // FIXED: Start at position 0 since we're already translated
    int currentY = 0;

    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

        // Skip drawing if item is completely outside visible area
        int visibleTop = verticalOffset;
        int visibleBottom = verticalOffset + (height() - timeMarkersHeight);

        if (currentY + itemHeight < visibleTop)
        {
            currentY += itemHeight;
            continue;
        }
        if (currentY > visibleBottom)
        {
            break;
        }

        if (item.type == DisplayItem::Signal)
        {
            const VCDSignal &signal = item.signal.signal;

            // FIXED: Draw at the currentY position (no additional offset needed)
            if (signal.width > 1)
            {
                drawBusWaveform(painter, signal, currentY);
            }
            else
            {
                drawSignalWaveform(painter, signal, currentY);
            }
        }

        currentY += itemHeight;
    }
}

void WaveformWidget::drawSignalWaveform(QPainter &painter, const VCDSignal &signal, int yPos)
{
    // Use lazy loading to get value changes
    const auto changes = vcdParser->getValueChangesForSignal(signal.fullName);
    if (changes.isEmpty())
        return;

    // Check if this signal is selected
    bool isSelected = false;
    for (int i = 0; i < displayItems.size(); i++)
    {
        if (selectedItems.contains(i) &&
            displayItems[i].type == DisplayItem::Signal &&
            displayItems[i].signal.signal.fullName == signal.fullName)
        {
            isSelected = true;
            break;
        }
    }

    // Use thicker line for selected signals
    int currentLineWidth = isSelected ? selectedLineWidth : lineWidth;

    // Emergency check for extreme zoom
    if (timeScale > 1000.0 || timeScale < 0.001)
    {
        qDebug() << "Emergency: Skipping waveform drawing due to extreme zoom:" << timeScale;
        return;
    }

    // Check if user has set a custom color
    bool hasCustomColor = signalColors.contains(signal.fullName);
    QColor customColor = hasCustomColor ? signalColors[signal.fullName] : QColor();

    // Hardcoded small offset - 3 pixels from top and bottom
    int signalTop = yPos + 3;
    int signalBottom = yPos + signalHeight - 3;
    int signalMidY = yPos + signalHeight / 2;
    int highLevel = signalTop;    // Top of the waveform area
    int lowLevel = signalBottom;  // Bottom of the waveform area
    int middleLevel = signalMidY; // Middle for X/Z values

    int prevTime = 0;
    QString prevValue = "0";
    int prevX = timeToX(prevTime);

    for (const auto &change : changes)
    {
        int currentX = timeToX(change.timestamp);

        // Determine color for the HORIZONTAL segment
        QColor horizontalColor;

        bool prevIsX = (prevValue == "x" || prevValue == "X");
        bool prevIsZ = (prevValue == "z" || prevValue == "Z");
        bool isX = (change.value == "x" || change.value == "X");
        bool isZ = (change.value == "z" || change.value == "Z");

        // If user has chosen a custom color, use it for all horizontal segments
        if (hasCustomColor)
        {
            horizontalColor = customColor;
        }
        else
        {
            // No custom color - use value-based colors for horizontal segments
            if (prevIsX)
            {
                horizontalColor = QColor(255, 0, 0); // Red for X
            }
            else if (prevIsZ)
            {
                horizontalColor = QColor(255, 165, 0); // Orange for Z
            }
            else if (prevValue == "0")
            {
                horizontalColor = QColor(0x01, 0xFF, 0xFF); // Cyan for 0
            }
            else if (prevValue == "1")
            {
                horizontalColor = QColor(0, 255, 0); // Green for 1
            }
            else
            {
                horizontalColor = QColor(0xFF, 0xE6, 0xCD); // Default for other values
            }
        }

        // Draw the HORIZONTAL segment based on previous value - use currentLineWidth
        painter.setPen(QPen(horizontalColor, currentLineWidth));
        if (prevIsX || prevIsZ)
        {
            // Previous value was X or Z - draw at middle level
            painter.drawLine(prevX, middleLevel, currentX, middleLevel);
        }
        else if (prevValue == "1")
        {
            painter.drawLine(prevX, highLevel, currentX, highLevel);
        }
        else
        {
            // Previous value was zero - draw at low level
            painter.drawLine(prevX, lowLevel, currentX, lowLevel);
        }

        // Draw VERTICAL transition line if value changed
        if (prevValue != change.value)
        {
            int fromY, toY;

            // Determine starting Y position based on PREVIOUS value
            if (prevIsX || prevIsZ)
            {
                fromY = middleLevel;
            }
            else if (prevValue == "1")
            {
                fromY = highLevel;
            }
            else
            {
                fromY = lowLevel;
            }

            // Determine ending Y position based on CURRENT value
            if (isX || isZ)
            {
                toY = middleLevel;
            }
            else if (change.value == "1")
            {
                toY = highLevel;
            }
            else
            {
                toY = lowLevel;
            }

            // Determine color for VERTICAL line
            QColor verticalColor;
            if (hasCustomColor)
            {
                // Use custom color for vertical lines too
                verticalColor = customColor;
            }
            else
            {
                // No custom color - vertical lines use CYAN
                verticalColor = QColor(0x01, 0xFF, 0xFF); // Cyan
            }

            // Use currentLineWidth for vertical transitions too
            painter.setPen(QPen(verticalColor, currentLineWidth));
            painter.drawLine(currentX, fromY, currentX, toY);
        }

        prevTime = change.timestamp;
        prevValue = change.value;
        prevX = currentX;
    }

    // Draw the final segment
    QColor finalColor;

    bool finalIsX = (prevValue == "x" || prevValue == "X");
    bool finalIsZ = (prevValue == "z" || prevValue == "Z");

    // If user has chosen a custom color, use it for the final segment
    if (hasCustomColor)
    {
        finalColor = customColor;
    }
    else
    {
        // No custom color - use value-based color for final segment
        if (finalIsX)
        {
            finalColor = QColor(255, 0, 0); // Red for X
        }
        else if (finalIsZ)
        {
            finalColor = QColor(255, 165, 0); // Orange for Z
        }
        else if (prevValue == "0")
        {
            finalColor = QColor(0x01, 0xFF, 0xFF); // Cyan for 0
        }
        else if (prevValue == "1")
        {
            finalColor = QColor(0, 255, 0); // Green for 1
        }
        else
        {
            finalColor = QColor(0xFF, 0xE6, 0xCD); // Default for other values
        }
    }

    // Use currentLineWidth for the final segment
    painter.setPen(QPen(finalColor, currentLineWidth));

    int endX = timeToX(vcdParser->getEndTime());

    if (finalIsX || finalIsZ)
    {
        painter.drawLine(prevX, middleLevel, endX, middleLevel);
    }
    else if (prevValue == "1")
    {
        painter.drawLine(prevX, highLevel, endX, highLevel);
    }
    else
    {
        painter.drawLine(prevX, lowLevel, endX, lowLevel);
    }
}

void WaveformWidget::drawCleanTransition(QPainter &painter, int x, int top, int bottom, const QColor &signalColor)
{
    int height = bottom - top;

    // Draw thick vertical line (3 pixels wide for visibility)
    painter.setPen(QPen(signalColor, 2));
    painter.drawLine(x, top, x, bottom);

    // Draw crisp cross markers using integer coordinates
    int crossSize = 2;

    // Top cross - horizontal line
    painter.drawLine(x - crossSize, top + crossSize, x + crossSize, top + crossSize);
    // Top cross - vertical line
    painter.drawLine(x, top, x, top + crossSize * 2);

    // Bottom cross - horizontal line
    painter.drawLine(x - crossSize, bottom - crossSize, x + crossSize, bottom - crossSize);
    // Bottom cross - vertical line
    painter.drawLine(x, bottom - crossSize * 2, x, bottom);

    // Center dot - filled rectangle for crispness
    int centerY = top + height / 2;
    painter.fillRect(x - 1, centerY - 1, 3, 3, signalColor);

    // Optional: Add a white outline for better visibility
    painter.setPen(QPen(Qt::white, 1));
    painter.drawLine(x, top, x, bottom);
}

void WaveformWidget::drawBusWaveform(QPainter &painter, const VCDSignal &signal, int yPos)
{
    // Use lazy loading to get value changes
    const auto changes = vcdParser->getValueChangesForSignal(signal.fullName);
    if (changes.isEmpty())
        return;

    // Check if this signal is selected
    bool isSelected = false;
    for (int i = 0; i < displayItems.size(); i++)
    {
        if (selectedItems.contains(i) &&
            displayItems[i].type == DisplayItem::Signal &&
            displayItems[i].signal.signal.fullName == signal.fullName)
        {
            isSelected = true;
            break;
        }
    }

    int currentLineWidth = isSelected ? selectedLineWidth : lineWidth;

    // Emergency check for extreme zoom
    if (timeScale > 1000.0 || timeScale < 0.001)
    {
        qDebug() << "Emergency: Skipping bus drawing due to extreme zoom:" << timeScale;
        return;
    }

    // FIX: Use getSignalColor to get the color
    QColor signalColor = getSignalColor(signal.fullName);

    // USE EXACTLY THE SAME DIMENSIONS AS drawSignalWaveform
    int busTop = yPos + 3;                   // Same as signalTop
    int busBottom = yPos + signalHeight - 3; // Same as signalBottom
    int busMidY = yPos + signalHeight / 2;   // Same as signalMidY
    int textY = busMidY + 4;
    int waveformHeight = busBottom - busTop; // This should now be identical to signal waveform height

    int prevTime = 0;
    QString prevValue = getBusValueAtTime(signal.fullName, 0);
    int prevX = timeToX(prevTime);

    // Draw clean bus background - but make it the same visual thickness
    painter.fillRect(prevX, busTop, width() - signalNamesWidth - valuesColumnWidth, waveformHeight, QColor(0, 0, 0));

    // Draw value regions with clear transitions
    for (int i = 0; i < changes.size(); i++)
    {
        const auto &change = changes[i];
        int currentX = timeToX(change.timestamp);

        // Clean region coloring
        QColor regionColor = QColor(0, 0, 0);

        if (prevValue.contains('x') || prevValue.contains('X'))
        {
            regionColor = QColor(120, 60, 60); // Dark red for X
        }
        else if (prevValue.contains('z') || prevValue.contains('Z'))
        {
            regionColor = QColor(120, 80, 40); // Dark orange for Z
        }
        else if (!prevValue.isEmpty() && prevValue != "0")
        {
            // Active value - slightly brighter
            regionColor = QColor(0, 0, 0);
        }

        // Draw the value region - using same height as signals
        painter.fillRect(prevX, busTop, currentX - prevX, waveformHeight, regionColor);

        // Draw the value text with clean styling
        if (currentX - prevX > 50) // Only draw text if region is wide enough
        {
            QString displayValue = formatBusValue(prevValue);
            int textWidth = painter.fontMetrics().horizontalAdvance(displayValue);
            int centerX = prevX + (currentX - prevX) / 2;

            // Simple text with good contrast
            painter.setPen(QPen(Qt::cyan));
            painter.drawText(centerX - textWidth / 2, textY, displayValue);
        }

        // Draw clean transition line - using same line width as signals
        if (i > 0) // Don't draw transition for first value
        {
            drawCleanTransition(painter, currentX, busTop, busBottom, signalColor);
        }

        prevTime = change.timestamp;
        prevValue = change.value;
        prevX = currentX;
    }

    // Draw the final region
    int endX = timeToX(vcdParser->getEndTime());
    if (endX > prevX)
    {
        QColor finalRegionColor = QColor(0, 0, 0);
        if (prevValue.contains('x') || prevValue.contains('X'))
        {
            finalRegionColor = QColor(120, 60, 60);
        }
        else if (prevValue.contains('z') || prevValue.contains('Z'))
        {
            finalRegionColor = QColor(120, 80, 40);
        }

        painter.fillRect(prevX, busTop, endX - prevX, waveformHeight, finalRegionColor);

        if (endX - prevX > 50)
        {
            QString displayValue = formatBusValue(prevValue);
            int textWidth = painter.fontMetrics().horizontalAdvance(displayValue);
            int centerX = prevX + (endX - prevX) / 2;

            painter.setPen(QPen(Qt::cyan));
            painter.drawText(centerX - textWidth / 2, textY, displayValue);
        }
    }

    // Draw clean bus outline - use currentLineWidth for selected signals
    painter.setPen(QPen(signalColor, currentLineWidth));
    painter.drawRect(timeToX(0), busTop, endX - timeToX(0), waveformHeight);
}

void WaveformWidget::updateScrollBar()
{
    if (!vcdParser)
    {
        horizontalScrollBar->setRange(0, 0);
        verticalScrollBar->setRange(0, 0);
        return;
    }

    // Calculate viewport dimensions safely
    int viewportWidth = width() - signalNamesWidth - valuesColumnWidth;
    if (viewportWidth < 10)
        viewportWidth = 10;

    int viewportHeight = height();
    if (viewportHeight < 10)
        viewportHeight = 10;

    // Horizontal scrolling (unchanged)
    const int LEFT_MARGIN_PIXELS = static_cast<int>(-10 * timeScale);
    const int RIGHT_MARGIN_PIXELS = static_cast<int>(100 * timeScale);
    int timelinePixelWidth = static_cast<int>(vcdParser->getEndTime() * timeScale);
    int totalPixelWidth = timelinePixelWidth + LEFT_MARGIN_PIXELS + RIGHT_MARGIN_PIXELS;
    int maxScrollOffset = qMax(0, totalPixelWidth - viewportWidth);

    horizontalScrollBar->setRange(0, maxScrollOffset);
    horizontalScrollBar->setPageStep(viewportWidth);
    horizontalScrollBar->setSingleStep(viewportWidth / 10);

    // Vertical scrolling - calculate total content height
    int totalHeight = calculateTotalHeight();
    int visibleHeight = height() - timeMarkersHeight; // Subtract pinned timeline

    // Only enable vertical scrollbar if content is taller than visible area
    if (totalHeight > visibleHeight)
    {
        int maxVerticalOffset = totalHeight - visibleHeight;
        verticalScrollBar->setRange(0, maxVerticalOffset);
        verticalScrollBar->setPageStep(visibleHeight);
        verticalScrollBar->setSingleStep(30);
        verticalScrollBar->setVisible(true);

        // Ensure current offset is within bounds
        if (verticalOffset > maxVerticalOffset)
        {
            verticalOffset = maxVerticalOffset;
            verticalScrollBar->setValue(verticalOffset);
        }
    }
    else
    {
        verticalScrollBar->setRange(0, 0);
        verticalScrollBar->setVisible(false);
        verticalOffset = 0;
    }

    qDebug() << "Scrollbar - Total height:" << totalHeight
             << "Visible height:" << visibleHeight
             << "Vertical offset:" << verticalOffset
             << "Max vertical:" << verticalScrollBar->maximum();
}

int WaveformWidget::calculateTotalHeight() const
{
    if (displayItems.isEmpty())
        return timeMarkersHeight; // Just the timeline area

    int totalHeight = topMargin + timeMarkersHeight;
    for (const auto &item : displayItems)
    {
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;
        totalHeight += itemHeight;
    }

    // Add some extra padding at the bottom
    totalHeight += 10;

    return totalHeight;
}

int WaveformWidget::timeToX(int time) const
{
    if (!vcdParser)
        return 0;

    // Convert time to pixels, then subtract the scroll offset
    double pixelPosition = time * timeScale;
    double result = pixelPosition - timeOffset;

    // Clamp to safe integer range
    if (result > 1000000)
        return 1000000;
    if (result < -1000000)
        return -1000000;

    return static_cast<int>(result);
}

int WaveformWidget::xToTime(int x) const
{
    if (!vcdParser)
        return 0;

    // Handle invalid scale
    if (timeScale < 0.0001)
        return 0;

    // Convert pixel position (including scroll offset) back to time
    double result = (x + timeOffset) / timeScale;

    // Clamp to safe range
    if (result > 1000000000)
        return 1000000000;
    if (result < -1000000000)
        return -1000000000;

    return static_cast<int>(result);
}

QString WaveformWidget::getSignalValueAtTime(const QString &fullName, int time) const // CHANGE: parameter name
{
    // Use lazy loading - use fullName
    const auto changes = vcdParser->getValueChangesForSignal(fullName); // CHANGE: use fullName
    QString value = "0";

    for (const auto &change : changes)
    {
        if (change.timestamp > time)
            break;
        value = change.value;
    }

    return value;
}

QString WaveformWidget::getBusValueAtTime(const QString &fullName, int time) const // CHANGE: parameter name
{
    // Use lazy loading - use fullName
    const auto changes = vcdParser->getValueChangesForSignal(fullName); // CHANGE: use fullName
    QString value = "0";

    for (const auto &change : changes)
    {
        if (change.timestamp > time)
            break;
        value = change.value;
    }

    return value;
}

int WaveformWidget::calculateTimeStep(int startTime, int endTime) const
{
    int timeRange = endTime - startTime;
    if (timeRange <= 0)
        return 100;

    double pixelsPerStep = 100.0;
    double targetStep = pixelsPerStep / timeScale;

    double power = std::pow(10, std::floor(std::log10(targetStep)));
    double normalized = targetStep / power;

    if (normalized < 1.5)
        return static_cast<int>(power);
    else if (normalized < 3)
        return static_cast<int>(2 * power);
    else if (normalized < 7)
        return static_cast<int>(5 * power);
    else
        return static_cast<int>(10 * power);
}

void WaveformWidget::handleMultiSelection(int itemIndex, QMouseEvent *event)
{
    if (itemIndex < 0 || itemIndex >= displayItems.size())
        return;

    if (event->modifiers() & Qt::ShiftModifier && lastSelectedItem != -1)
    {
        // Shift-click: select range from last selected to current
        selectedItems.clear();
        int start = qMin(lastSelectedItem, itemIndex);
        int end = qMax(lastSelectedItem, itemIndex);
        for (int i = start; i <= end; i++)
        {
            selectedItems.insert(i);
        }
    }
    else if (event->modifiers() & Qt::ControlModifier)
    {
        // Ctrl-click: toggle selection
        if (selectedItems.contains(itemIndex))
        {
            selectedItems.remove(itemIndex);
        }
        else
        {
            selectedItems.insert(itemIndex);
        }
        lastSelectedItem = itemIndex;
    }
    else
    {
        // Regular click: single selection
        selectedItems.clear();
        selectedItems.insert(itemIndex);
        lastSelectedItem = itemIndex;
    }

    update();
    emit itemSelected(itemIndex);
}

int WaveformWidget::getItemYPosition(int index) const
{
    if (index < 0 || index >= displayItems.size())
        return -1;

    int yPos = timeMarkersHeight; // Start below the pinned timeline
    for (int i = 0; i < index; i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;
        yPos += itemHeight;
    }
    return yPos;
}

void WaveformWidget::startDrag(int itemIndex)
{
    if (itemIndex < 0 || itemIndex >= displayItems.size())
        return;

    isDraggingItem = true;
    dragItemIndex = itemIndex;
    dragStartPos = QCursor::pos();
    dragStartY = getItemYPosition(itemIndex) - verticalOffset; // Account for vertical offset
    setCursor(Qt::ClosedHandCursor);
}

void WaveformWidget::performDrag(int mouseY)
{
    if (!isDraggingItem || dragItemIndex < 0)
        return;

    // Adjust mouseY by vertical offset to get the actual position in the content
    int adjustedMouseY = mouseY + verticalOffset;

    int newIndex = -1;
    int currentY = topMargin + timeMarkersHeight;

    // Find new position based on adjusted mouse Y
    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

        // Check if mouse is within the first half of the item height (insert above)
        if (adjustedMouseY >= currentY && adjustedMouseY < currentY + itemHeight / 2)
        {
            newIndex = i;
            break;
        }
        // Check if mouse is within the second half of the item height (insert below)
        else if (adjustedMouseY >= currentY + itemHeight / 2 && adjustedMouseY < currentY + itemHeight)
        {
            newIndex = i + 1;
            break;
        }
        currentY += itemHeight;
    }

    // If we reached the end without finding a position, put it at the end
    if (newIndex == -1)
    {
        newIndex = displayItems.size();
    }

    // Clamp the new index to valid range
    newIndex = qMax(0, qMin(newIndex, displayItems.size()));

    // Don't move if it's the same position
    if (newIndex == dragItemIndex || newIndex == dragItemIndex + 1)
        return;

    moveItem(dragItemIndex, newIndex);
}

void WaveformWidget::moveItem(int itemIndex, int newIndex)
{
    // If moving to a position after the current item, adjust for the removal
    if (newIndex > itemIndex)
    {
        newIndex--;
    }

    DisplayItem item = displayItems[itemIndex];
    displayItems.removeAt(itemIndex);
    displayItems.insert(newIndex, item);

    // Update drag item index to the new position
    dragItemIndex = newIndex;

    // Update selection
    if (selectedItems.contains(itemIndex))
    {
        selectedItems.remove(itemIndex);
        selectedItems.insert(newIndex);
        lastSelectedItem = newIndex;
    }

    update();
}

void WaveformWidget::mousePressEvent(QMouseEvent *event)
{
    // Check if click is in search bar area (pinned)

    if (event->button() == Qt::LeftButton)
    {
        if (isOverNamesSplitter(event->pos()))
        {
            draggingNamesSplitter = true;
            setCursor(Qt::SplitHCursor);
            event->accept();
            return;
        }
        else if (isOverValuesSplitter(event->pos()))
        {
            draggingValuesSplitter = true;
            setCursor(Qt::SplitHCursor);
            event->accept();
            return;
        }
    }

    // Check if click is in timeline area (pinned top part of waveform area)
    int waveformStartX = signalNamesWidth + valuesColumnWidth;
    bool inTimelineArea = event->pos().x() >= waveformStartX &&
                          event->pos().y() < timeMarkersHeight;

    if (event->button() == Qt::LeftButton && inTimelineArea)
    {
        updateCursorTime(event->pos());
        event->accept();
        return;
    }

    // Check if click is in signal names column or waveform area
    bool inNamesColumn = event->pos().x() < signalNamesWidth;
    bool inWaveformArea = event->pos().x() >= waveformStartX;

    if (event->button() == Qt::MiddleButton)
    {
        // Start middle button drag for horizontal scrolling (waveform area only, excluding pinned timeline)
        if (!inNamesColumn && inWaveformArea && event->pos().y() >= timeMarkersHeight)
        {
            isDragging = true;
            dragStartX = event->pos().x() - waveformStartX;
            dragStartOffset = timeOffset;
            setCursor(Qt::ClosedHandCursor);
        }
    }
    else if (event->button() == Qt::LeftButton)
    {
        handleWaveformClick(event->pos());

        // Also allow setting cursor time when clicking in the main waveform area (excluding pinned timeline)
        if (inWaveformArea && event->pos().y() >= timeMarkersHeight)
        {
            updateCursorTime(event->pos());
            event->accept();
            return;
        }
        else if (!inNamesColumn && inWaveformArea)
        {
            // Start timeline dragging with left button
            isDragging = true;
            dragStartX = event->pos().x() - waveformStartX;
            dragStartOffset = timeOffset; // Current scroll position
            setCursor(Qt::ClosedHandCursor);
        }

        // Item selection/dragging only works in the scrollable area (below pinned headers)
        if (event->pos().y() >= topMargin + timeMarkersHeight)
        {
            int itemIndex = getItemAtPosition(event->pos());

            if (itemIndex >= 0)
            {
                // Handle multi-selection
                handleMultiSelection(itemIndex, event);

                // Prepare for drag - update visible signals first

                startDrag(itemIndex);
                update();
                emit itemSelected(itemIndex);
            }
            else
            {
                // NEW: Clear selection when clicking empty space
                // Only clear if not using Ctrl or Shift modifiers (which are for multi-selection)
                if (!(event->modifiers() & (Qt::ControlModifier | Qt::ShiftModifier)))
                {
                    selectedItems.clear();
                    lastSelectedItem = -1;
                    update();
                    emit itemSelected(-1);
                }

                // Start timeline dragging with left button (waveform area only, excluding pinned timeline)
                isDragging = true;
                dragStartX = event->pos().x() - waveformStartX;
                dragStartOffset = timeOffset;
                setCursor(Qt::ClosedHandCursor);
            }
        }
        else
        {
            // NEW: Also clear selection when clicking in the pinned header area
            if (!(event->modifiers() & (Qt::ControlModifier | Qt::ShiftModifier)))
            {
                selectedItems.clear();
                lastSelectedItem = -1;
                update();
                emit itemSelected(-1);
            }
        }
    }
}

void WaveformWidget::mouseDoubleClickEvent(QMouseEvent *event)
{
    int itemIndex = getItemAtPosition(event->pos());
    if (itemIndex >= 0)
    {
        if (isSpaceItem(itemIndex))
        {
            renameItem(itemIndex);
            event->accept();
            return;
        }
    }
    QWidget::mouseDoubleClickEvent(event);
}

void WaveformWidget::mouseMoveEvent(QMouseEvent *event)
{
    if (draggingNamesSplitter)
    {
        signalNamesWidth = qMax(150, event->pos().x());
        updateSplitterPositions();
    }
    else if (draggingValuesSplitter)
    {
        valuesColumnWidth = qMax(80, event->pos().x() - signalNamesWidth);
        updateSplitterPositions();
    }
    else
    {
        // Update cursor when over splitter
        if (isOverNamesSplitter(event->pos()) || isOverValuesSplitter(event->pos()))
        {
            setCursor(Qt::SplitHCursor);
        }
        else
        {
            setCursor(Qt::ArrowCursor);
        }

        if (isDraggingItem)
        {
            performDrag(event->pos().y());

            update();
        }
        else if (isDragging)
        {
            int waveformStartX = signalNamesWidth + valuesColumnWidth;
            int delta = dragStartX - (event->pos().x() - waveformStartX);

            // Calculate new offset and clamp it to scrollbar range
            int newOffset = dragStartOffset + delta;
            int maxOffset = horizontalScrollBar->maximum();
            newOffset = qMax(0, qMin(newOffset, maxOffset));

            timeOffset = newOffset;

            // Update scrollbar position to match
            horizontalScrollBar->setValue(timeOffset);

            update();
        }

        // Emit time change for cursor position in waveform area
        int waveformStartX = signalNamesWidth + valuesColumnWidth;
        if (event->pos().x() >= waveformStartX)
        {
            int currentTime = xToTime(event->pos().x() - waveformStartX);
            emit timeChanged(currentTime);
        }
    }
}

void WaveformWidget::mouseReleaseEvent(QMouseEvent *event)
{
    if (event->button() == Qt::LeftButton && (draggingNamesSplitter || draggingValuesSplitter))
    {
        draggingNamesSplitter = false;
        draggingValuesSplitter = false;
        setCursor(Qt::ArrowCursor);
        event->accept();
        return;
    }

    if (event->button() == Qt::MiddleButton || event->button() == Qt::LeftButton)
    {
        if (isDraggingItem)
        {
            isDraggingItem = false;
            dragItemIndex = -1;
            setCursor(Qt::ArrowCursor);
        }
        else if (isDragging)
        {
            isDragging = false;
            setCursor(Qt::ArrowCursor);
        }
    }
}

void WaveformWidget::keyPressEvent(QKeyEvent *event)
{
    if (event->key() == Qt::Key_A && event->modifiers() & Qt::ControlModifier)
    {
        selectAllSignals();
        event->accept();
    }
    else if (event->key() == Qt::Key_Delete)
    {
        removeSelectedSignals();
        event->accept();
    }
    else if (event->key() == Qt::Key_Escape && isSearchActive)
    {
        // Clear search on Escape and lose focus
        handleSearchInput("");
        isSearchFocused = false;
        event->accept();
    }
    else if (event->key() == Qt::Key_Return || event->key() == Qt::Key_Enter)
    {
        // Keep search but lose focus on Enter
        if (isSearchActive)
        {
            isSearchFocused = false;
            update();
            event->accept();
        }
        else
        {
            QWidget::keyPressEvent(event);
        }
    }
    else if (event->key() == Qt::Key_Backspace)
    {
        // Handle backspace in search
        if (isSearchActive)
        {
            handleSearchInput(searchText.left(searchText.length() - 1));
            event->accept();
        }
        else
        {
            QWidget::keyPressEvent(event);
        }
    }
    // Signal height adjustment shortcuts
    else if (event->modifiers() & Qt::ControlModifier)
    {
        if (event->key() == Qt::Key_Up)
        {
            setSignalHeight(signalHeight + 2);
            event->accept();
            return;
        }
        else if (event->key() == Qt::Key_Down)
        {
            setSignalHeight(signalHeight - 2);
            event->accept();
            return;
        }
    }
    else if (!event->text().isEmpty() && event->text().at(0).isPrint())
    {
        // Handle regular text input for search
        if (!isSearchActive)
        {
            handleSearchInput(event->text());
        }
        else
        {
            handleSearchInput(searchText + event->text());
        }
        event->accept();
    }
    else
    {
        QWidget::keyPressEvent(event);
    }
}

void WaveformWidget::wheelEvent(QWheelEvent *event)
{
    if (event->modifiers() & Qt::ControlModifier)
    {
        // Ctrl + Wheel for zoom
        if (event->angleDelta().y() > 0)
        {
            zoomIn();
        }
        else
        {
            zoomOut();
        }
    }
    else if (event->modifiers() & Qt::ShiftModifier)
    {
        // Shift + Wheel for horizontal scrolling
        int scrollAmount = event->angleDelta().y();
        timeOffset += scrollAmount / 2;
        updateScrollBar();
        update();
    }
    else
    {
        // Regular wheel for vertical scrolling
        int scrollAmount = event->angleDelta().y();
        verticalOffset -= scrollAmount / 2;

        // Clamp vertical offset to valid range
        int maxVerticalOffset = verticalScrollBar->maximum();
        verticalOffset = qMax(0, qMin(verticalOffset, maxVerticalOffset));

        // Update scrollbar position
        verticalScrollBar->setValue(verticalOffset);

        update();

        qDebug() << "Vertical scroll - Offset:" << verticalOffset << "Max:" << maxVerticalOffset;
    }
}

void WaveformWidget::setVisibleSignals(const QList<VCDSignal> &visibleSignals)
{
    // If we're at an extreme zoom level, reset to reasonable zoom first
    if (timeScale > 100.0 || timeScale < 0.01)
    {
        qDebug() << "Resetting extreme zoom level before adding signals:" << timeScale;
        timeScale = 1.0;
        timeOffset = 0;
    }

    displayItems.clear();

    // Load data for the selected signals
    if (vcdParser && !visibleSignals.isEmpty())
    {
        QList<QString> fullNames; // CHANGE: use fullNames
        for (const auto &signal : visibleSignals)
        {
            fullNames.append(signal.fullName); // CHANGE: use fullName
        }

        // Load signal data before displaying
        vcdParser->loadSignalsData(fullNames); // This now uses fullNames
    }

    for (const auto &signal : visibleSignals)
    {
        displayItems.append(DisplayItem::createSignal(signal));
    }
    selectedItems.clear();
    lastSelectedItem = -1;

    // NEW: Initialize cursor to last signal if we have signals
    updateSignalCursorAfterChanges();

    // Auto-zoom to fit after adding signals
    if (!visibleSignals.isEmpty())
    {
        zoomFit();
    }

    updateScrollBar();
    update();
    emit itemSelected(-1);
}

// Update WaveformWidget::contextMenuEvent to handle waveform area context menus
void WaveformWidget::contextMenuEvent(QContextMenuEvent *event)
{
    int itemIndex = getItemAtPosition(event->pos());

    // If no item clicked but we're in waveform area, try to find signal under cursor
    if (itemIndex == -1)
    {
        int waveformStartX = signalNamesWidth + valuesColumnWidth;
        QPoint adjustedPos = event->pos();
        adjustedPos.setX(adjustedPos.x() - waveformStartX);
        itemIndex = getItemAtPosition(adjustedPos);
    }

    showContextMenu(event->globalPos(), itemIndex);
}

void WaveformWidget::resizeEvent(QResizeEvent *event)
{
    Q_UNUSED(event)

    // Ensure minimum dimensions
    if (width() < 100 || height() < 100)
    {
        qDebug() << "Warning: Very small widget size" << width() << "x" << height();
    }

    updateScrollBar();

    // Position the scrollbars safely
    int scrollbarSize = 20;

    // Horizontal scrollbar - spans the entire bottom
    horizontalScrollBar->setGeometry(
        signalNamesWidth + valuesColumnWidth,
        qMax(0, height() - scrollbarSize),
        qMax(0, width() - signalNamesWidth - valuesColumnWidth),
        scrollbarSize);

    // Vertical scrollbar - spans the right side, above horizontal scrollbar
    verticalScrollBar->setGeometry(
        qMax(0, width() - scrollbarSize),
        0,
        scrollbarSize,
        qMax(0, height() - scrollbarSize)); // Leave space for horizontal scrollbar

    qDebug() << "Resize event - Widget:" << width() << "x" << height()
             << "Horizontal scrollbar:" << horizontalScrollBar->geometry()
             << "Vertical scrollbar:" << verticalScrollBar->geometry();
}

int WaveformWidget::getItemAtPosition(const QPoint &pos) const
{
    if (displayItems.isEmpty())
        return -1;

    // Only detect items in the scrollable area (below pinned headers)
    if (pos.y() < timeMarkersHeight)
        return -1;

    // FIXED: Adjust for vertical offset correctly
    int y = pos.y() + verticalOffset - timeMarkersHeight;

    if (y < 0)
        return -1;

    int currentY = 0;
    for (int i = 0; i < displayItems.size(); i++)
    {
        const auto &item = displayItems[i];
        int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;

        if (y >= currentY && y < currentY + itemHeight)
            return i;
        currentY += itemHeight;
    }

    return -1;
}

QString WaveformWidget::promptForName(const QString &title, const QString &defaultName)
{
    bool ok;
    QString name = QInputDialog::getText(this, title, "Name:", QLineEdit::Normal, defaultName, &ok);
    if (ok)
    {
        return name;
    }
    return defaultName;
}

void WaveformWidget::addSpaceAbove(int index)
{
    if (index < 0 || index >= displayItems.size())
        return;

    QString name = promptForName("Add Space", "");
    displayItems.insert(index, DisplayItem::createSpace(name));
    update();
}

void WaveformWidget::addSpaceBelow(int index)
{
    if (index < 0 || index >= displayItems.size())
        return;

    QString name = promptForName("Add Space", "");
    int insertIndex = index + 1;
    if (insertIndex > displayItems.size())
    {
        insertIndex = displayItems.size();
    }

    displayItems.insert(insertIndex, DisplayItem::createSpace(name));
    update();
}

void WaveformWidget::renameItem(int itemIndex)
{
    if (itemIndex < 0 || itemIndex >= displayItems.size())
        return;

    DisplayItem &item = displayItems[itemIndex];
    QString currentName = item.getName();
    QString newName = promptForName("Rename", currentName);

    if (!newName.isEmpty() && newName != currentName && item.type == DisplayItem::Space)
    {
        item.space.name = newName;
        update();
    }
}

QColor WaveformWidget::getSignalColor(const QString &fullName) const
{
    // If user has set a custom color, use it
    if (signalColors.contains(fullName))
    {
        return signalColors[fullName];
    }

    // Default to #ffe6cd for all signals (this will be overridden for 0 and 1 values)
    return QColor(0xFF, 0xE6, 0xCD);
}

void WaveformWidget::changeSignalColor(int itemIndex)
{
    if (selectedItems.isEmpty())
        return;

    // Get the first selected signal to use as current color reference
    QColor currentColor = Qt::green;
    for (int index : selectedItems)
    {
        if (isSignalItem(index))
        {
            const VCDSignal &signal = displayItems[index].signal.signal;
            currentColor = getSignalColor(signal.fullName);
            break;
        }
    }

    QMenu colorMenu(this);

    // Predefined colors
    QList<QPair<QString, QColor>> predefinedColors = {
        {"Red", QColor(255, 0, 0)},
        {"Green", QColor(0, 255, 0)},
        {"Blue", QColor(0, 0, 255)},
        {"Yellow", QColor(255, 255, 0)},
        {"Cyan", QColor(0, 255, 255)},
        {"Magenta", QColor(255, 0, 255)},
        {"Orange", QColor(255, 165, 0)},
        {"Purple", QColor(128, 0, 128)},
        {"Pink", QColor(255, 192, 203)},
        {"White", QColor(255, 255, 255)}};

    for (const auto &colorPair : predefinedColors)
    {
        QAction *colorAction = colorMenu.addAction(colorPair.first);
        colorAction->setData(colorPair.second);

        // Create color icon
        QPixmap pixmap(16, 16);
        pixmap.fill(colorPair.second);
        colorAction->setIcon(QIcon(pixmap));
    }

    colorMenu.addSeparator();
    colorMenu.addAction("Custom Color...");

    // Update menu title to show how many signals are selected
    if (selectedItems.size() > 1)
    {
        colorMenu.setTitle(QString("Change Color for %1 Signals").arg(selectedItems.size()));
    }

    QAction *selectedAction = colorMenu.exec(QCursor::pos());

    if (selectedAction)
    {
        QColor newColor;

        if (selectedAction->text() == "Custom Color...")
        {
            newColor = QColorDialog::getColor(currentColor, this,
                                              QString("Choose color for %1 signals").arg(selectedItems.size()));
            if (!newColor.isValid())
            {
                return; // User cancelled
            }
        }
        else
        {
            newColor = selectedAction->data().value<QColor>();
        }

        // Apply the color to all selected signals using fullName
        for (int index : selectedItems)
        {
            if (isSignalItem(index))
            {
                const VCDSignal &signal = displayItems[index].signal.signal;
                signalColors[signal.fullName] = newColor;
            }
        }
        update();
    }
}

bool WaveformWidget::isOverNamesSplitter(const QPoint &pos) const
{
    return (pos.x() >= signalNamesWidth - 3 && pos.x() <= signalNamesWidth + 3);
}

bool WaveformWidget::isOverValuesSplitter(const QPoint &pos) const
{
    int valuesColumnStart = signalNamesWidth;
    int valuesColumnEnd = valuesColumnStart + valuesColumnWidth;
    return (pos.x() >= valuesColumnEnd - 3 && pos.x() <= valuesColumnEnd + 3);
}

void WaveformWidget::updateSplitterPositions()
{
    // Ensure minimum widths
    signalNamesWidth = qMax(150, signalNamesWidth);
    valuesColumnWidth = qMax(80, valuesColumnWidth);

    // Ensure maximum widths
    if (signalNamesWidth + valuesColumnWidth > width() - 300)
    {
        valuesColumnWidth = width() - 300 - signalNamesWidth;
    }

    update();
}

void WaveformWidget::resetNavigationForCurrentSignal()
{
    if (currentlyNavigatedSignal.isEmpty())
        return;

    // Update the current index based on cursor position
    int newIndex = findEventIndexForTime(cursorTime, currentlyNavigatedSignal);
    signalCurrentEventIndex[currentlyNavigatedSignal] = newIndex;
    currentEventIndex = newIndex;

    qDebug() << "Reset navigation: Signal" << currentlyNavigatedSignal
             << "Cursor time:" << cursorTime
             << "New index:" << newIndex;
}

void WaveformWidget::updateCursorTime(const QPoint &pos)
{
    int waveformStartX = signalNamesWidth + valuesColumnWidth;

    // Only set cursor if click is in the timeline area (top part) AND we have signals
    if ((pos.x() < waveformStartX || pos.y() >= timeMarkersHeight) || displayItems.isEmpty())
    {
        return;
    }

    // Calculate cursor time based on the visible waveform area, accounting for horizontal scrolling
    int clickXInWaveform = pos.x() - waveformStartX;

    // Convert the click position to time, accounting for current zoom and scroll
    int oldCursorTime = cursorTime;
    cursorTime = xToTime(clickXInWaveform);

    showCursor = true;

    // NEW: Ensure cursor is immediately visible after click
    int cursorX = timeToX(cursorTime);
    int viewportWidth = width() - waveformStartX;

    if (cursorX < timeOffset || cursorX > timeOffset + viewportWidth)
    {
        // Cursor would be outside viewport, center it
        timeOffset = qMax(0, cursorX - viewportWidth / 2);
        horizontalScrollBar->setValue(timeOffset);
    }

    // Reset navigation for current signal when cursor moves
    if (!currentlyNavigatedSignal.isEmpty())
    {
        resetNavigationForCurrentSignal();
    }

    // Emit cursor time change if it actually changed
    if (cursorTime != oldCursorTime)
    {
        emit cursorTimeChanged(cursorTime);
    }

    update();
}

void WaveformWidget::showContextMenu(const QPoint &pos, int itemIndex)
{
    QMenu contextMenu(this);

    if (itemIndex >= 0)
    {
        // Ensure the clicked item is selected if no multi-selection
        if (!selectedItems.contains(itemIndex) && selectedItems.size() <= 1)
        {
            selectedItems.clear();
            selectedItems.insert(itemIndex);
            lastSelectedItem = itemIndex;
            update();
        }

        // Remove option - show count if multiple selected
        QString removeText = "Remove";
        if (selectedItems.size() > 1)
        {
            removeText = QString("Remove %1 Signals").arg(selectedItems.size());
        }
        else if (isSignalItem(itemIndex))
        {
            removeText = "Remove Signal";
        }
        else if (isSpaceItem(itemIndex))
        {
            removeText = "Remove Space";
        }

        contextMenu.addAction(removeText, this, &WaveformWidget::removeSelectedSignals);
        contextMenu.addSeparator();

        // Signal cursor option for signals
        if (isSignalItem(itemIndex))
        {
            QString cursorText = "Set Signal Cursor";
            if (signalCursorIndex == itemIndex) {
                cursorText = "✓ " + cursorText;
            }
            
            QAction *cursorAction = contextMenu.addAction(cursorText, this, [this, itemIndex]() {
                setSignalCursor(itemIndex);
            });
            
            // Add option to clear cursor
            if (signalCursorIndex >= 0) {
                contextMenu.addAction("Clear Signal Cursor", this, [this]() {
                    clearSignalCursor();
                });
            }
            contextMenu.addSeparator();
        }

        // Color change for signals - show count if multiple selected
        bool hasSignals = false;
        for (int index : selectedItems)
        {
            if (isSignalItem(index))
            {
                hasSignals = true;
                break;
            }
        }

        if (hasSignals)
        {
            QString colorText = "Change Color";
            if (selectedItems.size() > 1)
            {
                colorText = QString("Change Color for %1 Signals").arg(selectedItems.size());
            }
            contextMenu.addAction(colorText, this, [this, itemIndex]()
                                  { changeSignalColor(itemIndex); });
            contextMenu.addSeparator();
        }

        // Rename for spaces (only if single space selected)
        if (isSpaceItem(itemIndex) && selectedItems.size() == 1)
        {
            contextMenu.addAction("Rename", this, [this, itemIndex]()
                                  { renameItem(itemIndex); });
            contextMenu.addSeparator();
        }

        // Bus display options (only show if any multi-bit signals are selected)
        bool hasMultiBitSignals = false;
        for (int index : selectedItems)
        {
            if (isSignalItem(index) && getSignalFromItem(index).width > 1)
            {
                hasMultiBitSignals = true;
                break;
            }
        }

        if (hasMultiBitSignals)
        {
            QMenu *busFormatMenu = contextMenu.addMenu("Bus Display Format");

            QAction *hexAction = busFormatMenu->addAction("Hexadecimal", [this]()
                                                          { setBusDisplayFormat(WaveformWidget::Hex); });
            QAction *binAction = busFormatMenu->addAction("Binary", [this]()
                                                          { setBusDisplayFormat(WaveformWidget::Binary); });
            QAction *octAction = busFormatMenu->addAction("Octal", [this]()
                                                          { setBusDisplayFormat(WaveformWidget::Octal); });
            QAction *decAction = busFormatMenu->addAction("Decimal", [this]()
                                                          { setBusDisplayFormat(WaveformWidget::Decimal); });

            hexAction->setCheckable(true);
            binAction->setCheckable(true);
            octAction->setCheckable(true);
            decAction->setCheckable(true);

            hexAction->setChecked(busDisplayFormat == Hex);
            binAction->setChecked(busDisplayFormat == Binary);
            octAction->setChecked(busDisplayFormat == Octal);
            decAction->setChecked(busDisplayFormat == Decimal);

            contextMenu.addSeparator();
        }

        // Space management
        contextMenu.addAction("Add Space Above", this, [this, itemIndex]()
                              { addSpaceAbove(itemIndex); });
        contextMenu.addAction("Add Space Below", this, [this, itemIndex]()
                              { addSpaceBelow(itemIndex); });
    }
    else
    {
        // Global options when clicking empty space
        if (signalCursorIndex >= 0) {
            contextMenu.addAction("Clear Signal Cursor", this, [this]() {
                clearSignalCursor();
            });
            contextMenu.addSeparator();
        }

        // Global bus display options when clicking empty space
        QMenu *busFormatMenu = contextMenu.addMenu("Bus Display Format");

        QAction *hexAction = busFormatMenu->addAction("Hexadecimal", [this]()
                                                      { setBusDisplayFormat(WaveformWidget::Hex); });
        QAction *binAction = busFormatMenu->addAction("Binary", [this]()
                                                      { setBusDisplayFormat(WaveformWidget::Binary); });
        QAction *octAction = busFormatMenu->addAction("Octal", [this]()
                                                      { setBusDisplayFormat(WaveformWidget::Octal); });
        QAction *decAction = busFormatMenu->addAction("Decimal", [this]()
                                                      { setBusDisplayFormat(WaveformWidget::Decimal); });

        hexAction->setCheckable(true);
        binAction->setCheckable(true);
        octAction->setCheckable(true);
        decAction->setCheckable(true);

        hexAction->setChecked(busDisplayFormat == Hex);
        binAction->setChecked(busDisplayFormat == Binary);
        octAction->setChecked(busDisplayFormat == Octal);
        decAction->setChecked(busDisplayFormat == Decimal);
    }

    QAction *selectedAction = contextMenu.exec(pos);
    if (!selectedAction && itemIndex >= 0 && selectedItems.size() <= 1)
    {
        // Restore selection if menu was cancelled and only single item was selected
        selectedItems.clear();
        selectedItems.insert(itemIndex);
        update();
    }

    emit contextMenuRequested(pos, itemIndex);
}

QString WaveformWidget::formatBusValue(const QString &binaryValue) const
{
    if (binaryValue.isEmpty())
        return "x";

    // Handle special cases
    if (binaryValue == "x" || binaryValue == "X")
        return "x";
    if (binaryValue == "z" || binaryValue == "Z")
        return "z";

    // Check if it's a valid binary string
    if (!isValidBinary(binaryValue))
    {
        return binaryValue; // Return as-is if not pure binary
    }

    switch (busDisplayFormat)
    {
    case Hex:
        return binaryToHex(binaryValue);
    case Binary:
        return binaryValue;
    case Octal:
        return binaryToOctal(binaryValue);
    case Decimal:
        return binaryToDecimal(binaryValue);
    default:
        return binaryToHex(binaryValue);
    }
}

bool WaveformWidget::isValidBinary(const QString &value) const
{
    for (QChar ch : value)
    {
        if (ch != '0' && ch != '1')
        {
            return false;
        }
    }
    return true;
}

QString WaveformWidget::binaryToHex(const QString &binaryValue) const
{
    if (binaryValue.isEmpty())
        return "0";

    // Convert binary string to integer
    bool ok;
    unsigned long long value = binaryValue.toULongLong(&ok, 2);

    if (!ok)
    {
        return "x"; // Conversion failed
    }

    // Calculate number of hex digits needed
    int bitCount = binaryValue.length();
    int hexDigits = (bitCount + 3) / 4; // ceil(bitCount / 4)

    // Format as hex with appropriate number of digits
    return "0x" + QString::number(value, 16).rightJustified(hexDigits, '0').toUpper();
}

QString WaveformWidget::binaryToOctal(const QString &binaryValue) const
{
    if (binaryValue.isEmpty())
        return "0";

    // Convert binary to octal
    QString octal;
    QString paddedBinary = binaryValue;

    // Pad with zeros to make length multiple of 3
    while (paddedBinary.length() % 3 != 0)
    {
        paddedBinary = "0" + paddedBinary;
    }

    for (int i = 0; i < paddedBinary.length(); i += 3)
    {
        QString chunk = paddedBinary.mid(i, 3);
        int decimal = chunk.toInt(nullptr, 2);
        octal += QString::number(decimal);
    }

    return "0" + octal;
}

QString WaveformWidget::binaryToDecimal(const QString &binaryValue) const
{
    if (binaryValue.isEmpty())
        return "0";

    bool ok;
    unsigned long long value = binaryValue.toULongLong(&ok, 2);

    if (!ok)
    {
        return "x"; // Conversion failed
    }

    return QString::number(value);
}

void WaveformWidget::drawSearchBar(QPainter &painter)
{
    int searchBarHeight = 25;

    // Draw search bar background with focus indication
    QColor searchBgColor = isSearchFocused ? QColor(90, 90, 100) : QColor(70, 70, 80);
    painter.fillRect(0, timeMarkersHeight, signalNamesWidth, searchBarHeight, searchBgColor);

    // Draw border when focused
    if (isSearchFocused)
    {
        painter.setPen(QPen(QColor(100, 150, 255), 2));
        painter.drawRect(1, timeMarkersHeight + 1, signalNamesWidth - 2, searchBarHeight - 2);
    }

    // Draw search icon or label
    painter.setPen(QPen(Qt::white));
    painter.drawText(5, timeMarkersHeight + searchBarHeight - 8, "🔍");

    // Draw search text with cursor
    if (searchText.isEmpty())
    {
        painter.setPen(QPen(QColor(180, 180, 180)));
        painter.drawText(25, timeMarkersHeight + searchBarHeight - 8, "Search signals...");
    }
    else
    {
        painter.setPen(QPen(Qt::white));
        painter.drawText(25, timeMarkersHeight + searchBarHeight - 8, searchText);

        // Draw blinking cursor when focused (optional)
        if (isSearchFocused)
        {
            int textWidth = painter.fontMetrics().horizontalAdvance(searchText);
            int cursorX = 25 + textWidth + 2;
            painter.drawLine(cursorX, timeMarkersHeight + 5, cursorX, timeMarkersHeight + searchBarHeight - 5);
        }

        // Draw result count
        if (!searchResults.isEmpty())
        {
            QString resultText = QString("(%1)").arg(searchResults.size());
            int textWidth = painter.fontMetrics().horizontalAdvance(resultText);
            painter.drawText(signalNamesWidth - textWidth - 5, timeMarkersHeight + searchBarHeight - 8, resultText);
        }
    }

    // Update top margin to account for search bar
    // topMargin = searchBarHeight;
}

void WaveformWidget::searchSignals(const QString &searchText)
{
    handleSearchInput(searchText);
}

void WaveformWidget::clearSearch()
{
    handleSearchInput("");
}

void WaveformWidget::handleSearchInput(const QString &text)
{
    searchText = text;
    isSearchActive = !searchText.isEmpty();
    updateSearchResults();
    update();
}

void WaveformWidget::updateSearchResults()
{
    searchResults.clear();

    if (!isSearchActive || searchText.isEmpty())
    {
        // If no search, show all signals
        for (int i = 0; i < displayItems.size(); i++)
        {
            if (displayItems[i].type == DisplayItem::Signal)
            {
                searchResults.insert(i);
            }
        }
    }
    else
    {
        // Filter signals based on search text
        QString searchLower = searchText.toLower();
        for (int i = 0; i < displayItems.size(); i++)
        {
            if (displayItems[i].type == DisplayItem::Signal)
            {
                QString signalName = displayItems[i].getFullPath().toLower();
                if (signalName.contains(searchLower))
                {
                    searchResults.insert(i);
                }
            }
        }
    }

    // qDebug() << "Search results:" << searchResults;
    applySearchFilter();
}

void WaveformWidget::applySearchFilter()
{
    if (isSearchActive)
    {
        // Only select search results, don't filter them out
        selectedItems = searchResults;
        if (!selectedItems.isEmpty())
        {
            lastSelectedItem = *selectedItems.begin();
        }
        else
        {
            lastSelectedItem = -1;
        }
    }
    else
    {
        // Clear selection when search is inactive
        selectedItems.clear();
        lastSelectedItem = -1;
    }
    update();
    emit itemSelected(lastSelectedItem);
}

// Update the signal loading functions to use fullName
void WaveformWidget::ensureSignalLoaded(const QString &fullName) // CHANGE: parameter name
{
    if (!loadedSignalIdentifiers.contains(fullName)) // CHANGE: use fullName
    {
        // Load the signal data
        QList<QString> signalsToLoad = {fullName};
        vcdParser->loadSignalsData(signalsToLoad);
        loadedSignalIdentifiers.insert(fullName); // CHANGE: use fullName

        // Manage cache size
        if (loadedSignalIdentifiers.size() > MAX_CACHED_SIGNALS)
        {
            // Remove least recently used signal
            if (!loadedSignalIdentifiers.isEmpty())
            {
                QString oldestSignal = *loadedSignalIdentifiers.begin();
                loadedSignalIdentifiers.remove(oldestSignal);
            }
        }
    }
}

void WaveformWidget::setNavigationMode(NavigationMode mode)
{
    navigationMode = mode;

    // Clear ALL cached events when navigation mode changes
    signalEventTimestamps.clear();
    signalCurrentEventIndex.clear();
    currentlyNavigatedSignal.clear();
    currentEventIndex = -1;

    // Force update events immediately when mode changes
    if (!selectedItems.isEmpty())
    {
        updateEventList();
    }

    // Emit signal to update button states
    emit timeChanged(cursorTime);
}

void WaveformWidget::navigateToTime(int targetTime)
{
    if (!vcdParser)
        return;

    // Ensure the time is within valid range
    int endTime = vcdParser->getEndTime();
    targetTime = qMax(0, qMin(targetTime, endTime));

    qDebug() << "Navigating to time:" << targetTime << "(end time:" << endTime << ")";

    int oldCursorTime = cursorTime;

    // Set cursor time
    cursorTime = targetTime;
    showCursor = true;

    // SIMPLE AND CORRECT: Always center the cursor in the visible waveform area
    int waveformStartX = signalNamesWidth + valuesColumnWidth;
    int viewportWidth = width() - waveformStartX;

    if (viewportWidth > 0)
    {
        // Calculate what pixel position the cursor should be at to be centered
        // We want: cursorX = viewportWidth / 2
        // But cursorX = timeToX(cursorTime) = (cursorTime * timeScale) - timeOffset
        // So: (cursorTime * timeScale) - timeOffset = viewportWidth / 2
        // Therefore: timeOffset = (cursorTime * timeScale) - viewportWidth / 2

        timeOffset = (cursorTime * timeScale) - (viewportWidth / 2);

        // Clamp to valid range
        timeOffset = qMax(0, timeOffset);
        int maxOffset = horizontalScrollBar->maximum();
        timeOffset = qMin(timeOffset, maxOffset);

        qDebug() << "Viewport adjustment:";
        qDebug() << "  Cursor time:" << cursorTime;
        qDebug() << "  Time scale:" << timeScale;
        qDebug() << "  Viewport width:" << viewportWidth;
        qDebug() << "  Calculated offset:" << (cursorTime * timeScale) - (viewportWidth / 2);
        qDebug() << "  Final offset:" << timeOffset;

        // Update scrollbar
        horizontalScrollBar->setValue(timeOffset);
    }

    // Reset navigation for current signal when cursor moves
    if (!currentlyNavigatedSignal.isEmpty())
    {
        resetNavigationForCurrentSignal();
    }

    // Emit cursor time change if it actually changed
    if (cursorTime != oldCursorTime)
    {
        emit cursorTimeChanged(cursorTime);
    }

    updateScrollBar();
    update();

    qDebug() << "Navigation complete - Cursor time:" << cursorTime;
}

void WaveformWidget::navigateToPreviousEvent()
{
    qDebug() << "=== PREVIOUS BUTTON CLICKED ===";
    qDebug() << "Currently navigated signal:" << currentlyNavigatedSignal;

    if (currentlyNavigatedSignal.isEmpty() || !signalEventTimestamps.contains(currentlyNavigatedSignal))
    {
        qDebug() << "No signal selected for navigation";
        return;
    }

    QVector<int> &events = signalEventTimestamps[currentlyNavigatedSignal];
    int &currentIndex = signalCurrentEventIndex[currentlyNavigatedSignal];

    qDebug() << "Events count:" << events.size();
    qDebug() << "Current index:" << currentIndex;
    qDebug() << "Current cursor time:" << cursorTime;

    if (events.isEmpty())
    {
        qDebug() << "No events found for signal";
        return;
    }

    // If no current index set, find where we are based on cursor time
    if (currentIndex == -1)
    {
        currentIndex = findEventIndexForTime(cursorTime, currentlyNavigatedSignal);
        qDebug() << "Setting initial current index to:" << currentIndex;
    }

    // If we're before the first event, go to the first event
    if (currentIndex == -1)
    {
        currentIndex = 0;
        int targetTime = events[currentIndex];
        currentEventIndex = currentIndex;

        qDebug() << "Previous: Before first event, going to first event at index" << currentIndex << "Time:" << targetTime;
        navigateToTime(targetTime);
        return;
    }

    // If we're at the beginning, don't move
    if (currentIndex <= 0)
    {
        qDebug() << "Already at first event, cannot go previous";
        return;
    }

    currentIndex--;
    int targetTime = events[currentIndex];
    currentEventIndex = currentIndex;

    qDebug() << "Previous: Moving to index" << currentIndex << "Time:" << targetTime;
    navigateToTime(targetTime);
}

void WaveformWidget::navigateToNextEvent()
{
    qDebug() << "=== NEXT BUTTON CLICKED ===";
    qDebug() << "Currently navigated signal:" << currentlyNavigatedSignal;

    if (currentlyNavigatedSignal.isEmpty() || !signalEventTimestamps.contains(currentlyNavigatedSignal))
    {
        qDebug() << "No signal selected for navigation";
        return;
    }

    QVector<int> &events = signalEventTimestamps[currentlyNavigatedSignal];
    int &currentIndex = signalCurrentEventIndex[currentlyNavigatedSignal];

    qDebug() << "Events count:" << events.size();
    qDebug() << "Current index:" << currentIndex;
    qDebug() << "Current cursor time:" << cursorTime;

    if (events.isEmpty())
    {
        qDebug() << "No events found for signal";
        return;
    }

    // If no current index set, find where we are based on cursor time
    if (currentIndex == -1)
    {
        currentIndex = findEventIndexForTime(cursorTime, currentlyNavigatedSignal);
        qDebug() << "Setting initial current index to:" << currentIndex;
    }

    // If we're before the first event, go to the first event
    if (currentIndex == -1)
    {
        currentIndex = 0;
        int targetTime = events[currentIndex];
        currentEventIndex = currentIndex;

        qDebug() << "Next: Before first event, going to first event at index" << currentIndex << "Time:" << targetTime;
        navigateToTime(targetTime);
        return;
    }

    // If we're at the end, don't move
    if (currentIndex >= events.size() - 1)
    {
        qDebug() << "Already at last event, cannot go next";
        return;
    }

    currentIndex++;
    int targetTime = events[currentIndex];
    currentEventIndex = currentIndex;

    qDebug() << "Next: Moving to index" << currentIndex << "Time:" << targetTime;
    navigateToTime(targetTime);
}

bool WaveformWidget::hasPreviousEvent() const
{
    if (currentlyNavigatedSignal.isEmpty() || !signalEventTimestamps.contains(currentlyNavigatedSignal))
        return false;

    const QVector<int> &events = signalEventTimestamps[currentlyNavigatedSignal];
    int currentIndex = signalCurrentEventIndex.value(currentlyNavigatedSignal, -1);

    if (events.isEmpty())
        return false;

    // If we're before the first event, no previous available
    if (currentIndex == -1)
    {
        return false;
    }

    // If we're at the first event but there are multiple events, we can go to previous (which would be before first)
    // OR if we're after the first event, we can go to previous event
    return currentIndex > 0;
}

bool WaveformWidget::hasNextEvent() const
{
    if (currentlyNavigatedSignal.isEmpty() || !signalEventTimestamps.contains(currentlyNavigatedSignal))
        return false;

    const QVector<int> &events = signalEventTimestamps[currentlyNavigatedSignal];
    int currentIndex = signalCurrentEventIndex.value(currentlyNavigatedSignal, -1);

    if (events.isEmpty())
        return false;

    // If we're before the first event, we can go to the first event
    if (currentIndex == -1)
    {
        return true;
    }

    // If we're at or before the last event, we can go next
    return currentIndex < events.size() - 1;
}

void WaveformWidget::updateEventList()
{
    if (selectedItems.isEmpty() || !vcdParser)
    {
        qDebug() << "No signal selected for event list update";
        return;
    }

    // Get the first selected signal for navigation
    int selectedIndex = *selectedItems.begin();
    if (!isSignalItem(selectedIndex))
    {
        qDebug() << "Selected item is not a signal";
        return;
    }

    const VCDSignal &signal = getSignalFromItem(selectedIndex);

    // Store which signal we're navigating
    currentlyNavigatedSignal = signal.fullName;

    const auto changes = vcdParser->getValueChangesForSignal(signal.fullName);
    if (changes.isEmpty())
    {
        qDebug() << "No value changes found for signal:" << signal.fullName;
        return;
    }

    // Always recompute events to ensure they're up to date
    QVector<int> events;

    QString prevValue;

    qDebug() << "=== PROCESSING EVENTS FOR MODE:" << navigationMode << "===";
    qDebug() << "Signal:" << signal.fullName;
    qDebug() << "Total changes:" << changes.size();

    for (int i = 0; i < changes.size(); i++)
    {
        const auto &change = changes[i];
        bool includeEvent = false;

        switch (navigationMode)
        {
        case ValueChange:
            includeEvent = true;
            break;

        case SignalRise:
            if (i > 0)
            {
                includeEvent = (prevValue == "0" && change.value == "1");
            }
            break;

        case SignalFall:
            if (i > 0)
            {
                includeEvent = (prevValue == "1" && change.value == "0");
            }
            break;
        }

        if (includeEvent)
        {
            events.append(change.timestamp);
            qDebug() << "  Including event at time:" << change.timestamp << "value:" << change.value;
        }

        prevValue = change.value;
    }

    // Store events for this signal
    signalEventTimestamps[signal.fullName] = events;

    // Set current index based on cursor position for this signal
    int newIndex = findEventIndexForTime(cursorTime, signal.fullName);
    signalCurrentEventIndex[signal.fullName] = newIndex;
    currentEventIndex = newIndex;

    qDebug() << "=== NAVIGATION SUMMARY ===";
    qDebug() << "Signal:" << signal.fullName;
    qDebug() << "Mode:" << navigationMode;
    qDebug() << "Total changes:" << changes.size();
    qDebug() << "Navigation events found:" << events.size();
    qDebug() << "Cursor time:" << cursorTime;
    qDebug() << "Current index:" << newIndex;
    qDebug() << "Events list:" << events;
    qDebug() << "=== END SUMMARY ===";
}

void WaveformWidget::forceNavigationUpdate()
{
    // Clear all navigation state
    signalEventTimestamps.clear();
    signalCurrentEventIndex.clear();
    currentlyNavigatedSignal.clear();
    currentEventIndex = -1;

    // Force update if we have selected signals
    if (!selectedItems.isEmpty())
    {
        updateEventList();
    }

    update();
    emit timeChanged(cursorTime);
}

int WaveformWidget::findEventIndexForTime(int time, const QString &signalFullName) const
{
    if (!signalEventTimestamps.contains(signalFullName))
        return -1;

    const QVector<int> &events = signalEventTimestamps[signalFullName];

    if (events.isEmpty())
        return -1;

    // If we're before the first event, return -1 to indicate we're before any event
    if (time < events.first())
    {
        return -1;
    }

    // If we're after the last event, return the last event index
    if (time > events.last())
    {
        return events.size() - 1;
    }

    // Find the event that is closest to but not greater than the current time
    for (int i = events.size() - 1; i >= 0; i--)
    {
        if (events[i] <= time)
        {
            return i;
        }
    }

    // Should never reach here, but return -1 if we do
    return -1;
}

// Overload for currently navigated signal
int WaveformWidget::findEventIndexForTime(int time) const
{
    if (currentlyNavigatedSignal.isEmpty())
        return -1;
    return findEventIndexForTime(time, currentlyNavigatedSignal);
}

int WaveformWidget::getCurrentEventTime() const
{
    if (currentEventIndex >= 0 && currentEventIndex < eventTimestamps.size())
    {
        return eventTimestamps[currentEventIndex];
    }
    return cursorTime;
}

void WaveformWidget::selectSignalAtPosition(const QPoint &pos)
{
    int itemIndex = getItemAtPosition(pos);
    if (itemIndex >= 0 && isSignalItem(itemIndex))
    {
        // Single selection - clear previous selection unless using modifiers
        Qt::KeyboardModifiers modifiers = QApplication::keyboardModifiers();
        if (!(modifiers & (Qt::ControlModifier | Qt::ShiftModifier)))
        {
            selectedItems.clear();
        }
        selectedItems.insert(itemIndex);
        lastSelectedItem = itemIndex;

        // Force navigation update for the newly selected signal
        forceNavigationUpdate();

        update();
        emit itemSelected(itemIndex);
    }
    else
    {
        // Clear selection when clicking empty space
        if (!(QApplication::keyboardModifiers() & (Qt::ControlModifier | Qt::ShiftModifier)))
        {
            selectedItems.clear();
            lastSelectedItem = -1;
            currentlyNavigatedSignal.clear();
            currentEventIndex = -1;
            update();
            emit itemSelected(-1);
        }
    }
}

void WaveformWidget::handleWaveformClick(const QPoint &pos)
{
    int waveformStartX = signalNamesWidth + valuesColumnWidth;

    // Check if click is in waveform area (not in names or values columns)
    if (pos.x() >= waveformStartX && pos.y() >= timeMarkersHeight)
    {
        // Calculate the maximum Y position where signals exist
        int maxSignalY = timeMarkersHeight;
        for (int i = 0; i < displayItems.size(); i++)
        {
            const auto &item = displayItems[i];
            int itemHeight = (item.type == DisplayItem::Signal) ? signalHeight : 30;
            maxSignalY += itemHeight;
        }

        // Add some padding
        maxSignalY += 10;

        // Only process clicks that are within the signal area (not empty space below)
        if (pos.y() <= maxSignalY)
        {
            // Store old cursor time to detect changes
            int oldCursorTime = cursorTime;

            // Also set cursor time
            int clickXInWaveform = pos.x() - waveformStartX;
            cursorTime = xToTime(clickXInWaveform);
            showCursor = true;

            // Try to select signal at this position
            selectSignalAtPosition(pos);

            // If cursor time changed and we have a selected signal, update navigation
            if (cursorTime != oldCursorTime && !currentlyNavigatedSignal.isEmpty())
            {
                resetNavigationForCurrentSignal();

                // Emit cursor time change
                emit cursorTimeChanged(cursorTime);
            }

            update();
        }
    }
}

void WaveformWidget::setSignalCursor(int itemIndex)
{
    if (itemIndex >= 0 && itemIndex < displayItems.size() && isSignalItem(itemIndex)) {
        signalCursorIndex = itemIndex;
        showSignalCursor = true;
        update();
        
        qDebug() << "Signal cursor set below signal:" << displayItems[itemIndex].getName();
    }
}

void WaveformWidget::clearSignalCursor()
{
    signalCursorIndex = -1;
    showSignalCursor = false;
    update();
    
    qDebug() << "Signal cursor cleared";
}

int WaveformWidget::getSignalCursorIndex() const
{
    return signalCursorIndex;
}

int WaveformWidget::getItemHeight(int index) const
{
    if (index < 0 || index >= displayItems.size())
        return 0;
        
    const auto &item = displayItems[index];
    return (item.type == DisplayItem::Signal) ? signalHeight : 30;
}

void WaveformWidget::insertSignalsAtCursor(const QList<VCDSignal> &newSignals, int cursorIndex)
{
    if (cursorIndex < 0 || cursorIndex >= displayItems.size() || newSignals.isEmpty())
        return;

    // Create display items for new signals
    QList<DisplayItem> newItems;
    for (const auto &signal : newSignals) {
        newItems.append(DisplayItem::createSignal(signal));
    }

    // Insert after the cursor position
    int insertPosition = cursorIndex + 1;
    
    // Ensure we don't go out of bounds
    if (insertPosition > displayItems.size()) {
        insertPosition = displayItems.size();
    }

    // Insert the new signals
    for (int i = newItems.size() - 1; i >= 0; i--) {
        displayItems.insert(insertPosition, newItems[i]);
    }

    // Load signal data for the new signals
    if (vcdParser) {
        QList<QString> fullNames;
        for (const auto &signal : newSignals) {
            fullNames.append(signal.fullName);
        }
        vcdParser->loadSignalsData(fullNames);
    }

    // Clear selection and update
    selectedItems.clear();
    lastSelectedItem = -1;
    
    // Move the cursor to below the newly inserted signals
    signalCursorIndex = insertPosition + newItems.size() - 1;
    showSignalCursor = true;
    
    updateScrollBar();
    update();
    emit itemSelected(-1);
}

void WaveformWidget::updateSignalCursorAfterChanges()
{
    if (displayItems.isEmpty()) {
        // No signals - hide cursor
        signalCursorIndex = -1;
        showSignalCursor = false;
        qDebug() << "No signals left - hiding cursor";
    } else {
        // If cursor was pointing to a signal that no longer exists, or if no cursor set
        if (signalCursorIndex < 0 || signalCursorIndex >= displayItems.size() || !isSignalItem(signalCursorIndex)) {
            // Set cursor to the last signal
            int lastSignalIndex = findLastSignalIndex();
            if (lastSignalIndex >= 0) {
                signalCursorIndex = lastSignalIndex;
                showSignalCursor = true;
                qDebug() << "Cursor moved to last signal at index:" << lastSignalIndex;
            } else {
                // No signals found (only spaces) - hide cursor
                signalCursorIndex = -1;
                showSignalCursor = false;
                qDebug() << "No signals found (only spaces) - hiding cursor";
            }
        } else {
            // Cursor is still valid, ensure it's visible
            showSignalCursor = true;
            qDebug() << "Cursor remains at valid signal index:" << signalCursorIndex;
        }
    }
    update();
}

int WaveformWidget::findLastSignalIndex() const
{
    for (int i = displayItems.size() - 1; i >= 0; i--) {
        if (isSignalItem(i)) {
            return i;
        }
    }
    return -1;
}#ifndef WAVEFORMWIDGET_H
#define WAVEFORMWIDGET_H

#include <QWidget>
#include <QPainter>
#include <QScrollBar>
#include <QWheelEvent>
#include <QMouseEvent>
#include <QVector>
#include <QList>
#include <QLabel>
#include <QMenu>
#include <QContextMenuEvent>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QSet>
#include <QInputDialog>
#include <QColorDialog>

#include "vcdparser.h"

// Simple signal display structure
struct DisplaySignal
{
    VCDSignal signal;
};

// Space structure
struct DisplaySpace
{
    QString name;
};

// Unified display item
struct DisplayItem
{
    enum Type
    {
        Signal,
        Space
    };
    Type type;

    // Only one of these is valid based on type
    DisplaySignal signal;
    DisplaySpace space;

    // Constructor for signal
    static DisplayItem createSignal(const VCDSignal &sig)
    {
        DisplayItem item;
        item.type = Signal;
        item.signal = {sig};
        return item;
    }

    // Constructor for space
    static DisplayItem createSpace(const QString &name = "")
    {
        DisplayItem item;
        item.type = Space;
        item.space = {name};
        return item;
    }

    QString getName() const
    {
        switch (type)
        {
        case Signal:
        {
            QString name = signal.signal.scope.isEmpty() ? signal.signal.name : signal.signal.scope + "." + signal.signal.name;
            // Remove any width information like "[3:0]" from the name
            int bracketPos = name.indexOf('[');
            if (bracketPos != -1)
            {
                name = name.left(bracketPos).trimmed();
            }
            return name;
        }
        case Space:
            return space.name.isEmpty() ? "⏐" : "⏐ " + space.name;
        }
        return "";
    }

    // Helper function to get full scope path for searching
    QString getFullPath() const
    {
        if (type == Signal)
        {
            QString fullPath = signal.signal.scope.isEmpty() ? signal.signal.name : signal.signal.scope + "." + signal.signal.name;
            // Remove any width information for consistency
            int bracketPos = fullPath.indexOf('[');
            if (bracketPos != -1)
            {
                fullPath = fullPath.left(bracketPos).trimmed();
            }
            return fullPath;
        }
        return getName();
    }

    int getHeight() const
    {
        // Use reasonable default heights - these will be overridden by the actual drawing functions
        // The actual drawing will use the configurable heights from WaveformWidget
        switch (type)
        {
        case Signal:
            return 30; // Default height for signals
        case Space:
            return 30; // Fixed height for spaces
        }
        return 30;
    }

    bool isSelectable() const { return true; }
    bool isMovable() const { return true; }
};

class WaveformWidget : public QWidget
{
    Q_OBJECT

public:
    // Signal cursor methods
    void setSignalCursor(int itemIndex);
    void clearSignalCursor();
    int getSignalCursorIndex() const;
    void insertSignalsAtCursor(const QList<VCDSignal> &newSignals, int cursorIndex);
    int getItemHeight(int index) const;
    // NEW: Cursor management methods
    void updateSignalCursorAfterChanges();
    int findLastSignalIndex() const;

    int getCursorTime() const { return cursorTime; }
    void navigateToTime(int time);
    enum NavigationMode
    {
        ValueChange,
        SignalRise,
        SignalFall
    };
    void setNavigationMode(NavigationMode mode);
    void navigateToPreviousEvent();
    void navigateToNextEvent();
    bool hasPreviousEvent() const;
    bool hasNextEvent() const;

    void selectSignalAtPosition(const QPoint &pos);

    void ensureSignalLoaded(const QString &identifier);
    void searchSignals(const QString &searchText);
    void clearSearch();

    // Add these to the public section of WaveformWidget class
    int getSignalHeight() const { return signalHeight; }
    int getLineWidth() const { return lineWidth; }
    void setSignalHeight(int height)
    {
        signalHeight = qMax(5, qMin(50, height)); // Clamp between 5 and 50
        update();
    }
    void setLineWidth(int width)
    {
        lineWidth = qMax(1, qMin(5, width)); // Clamp between 1 and 5
        update();
    }
    enum BusFormat
    {
        Hex,
        Binary,
        Octal,
        Decimal
    };

    explicit WaveformWidget(QWidget *parent = nullptr);
    void setVcdData(VCDParser *parser);
    void setVisibleSignals(const QList<VCDSignal> &visibleSignals);
    void zoomIn();
    void zoomOut();
    void zoomFit();
    void removeSelectedSignals();
    void selectAllSignals();
    void resetSignalColors();
    void setBusDisplayFormat(BusFormat format);
    BusFormat getBusDisplayFormat() const { return busDisplayFormat; }
    int getSelectedSignal() const { return selectedItems.isEmpty() ? -1 : *selectedItems.begin(); }
    QList<int> getSelectedItemIndices() const { return selectedItems.values(); }

    // Item management
    int getItemCount() const { return displayItems.size(); }
    const DisplayItem *getItem(int index) const;

signals:
    void timeChanged(int time);
    void itemSelected(int itemIndex);
    void contextMenuRequested(const QPoint &pos, int itemIndex);
    void cursorTimeChanged(int time); // ADD THIS - for yellow timeline cursor

protected:
    void paintEvent(QPaintEvent *event) override;
    void wheelEvent(QWheelEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
    void mouseMoveEvent(QMouseEvent *event) override;
    void mouseReleaseEvent(QMouseEvent *event) override;
    void resizeEvent(QResizeEvent *event) override;
    void contextMenuEvent(QContextMenuEvent *event) override;
    void keyPressEvent(QKeyEvent *event) override;
    void mouseDoubleClickEvent(QMouseEvent *event) override;

private:
    void drawSignalCursor(QPainter &painter);
    int signalCursorIndex = -1; // -1 means no cursor, otherwise index where cursor is placed
    bool showSignalCursor = false;
    void forceNavigationUpdate();
    void debugSignalState(int time) const;
    double calculateZoomFitScale() const
    {
        if (!vcdParser || vcdParser->getEndTime() <= 0)
        {
            return 1.0;
        }

        int availableWidth = width() - signalNamesWidth - valuesColumnWidth;

        // Use the same calculation as zoomFit but just return the scale
        const int PADDING = 10;
        int totalTimeRange = vcdParser->getEndTime() + (2 * PADDING);
        totalTimeRange = qMax(20, totalTimeRange);

        if (availableWidth <= 10)
        {
            return 1.0;
        }

        double zoomFitScale = static_cast<double>(availableWidth - (2 * PADDING)) / vcdParser->getEndTime();
        return qMax(0.02, qMin(50.0, zoomFitScale));
    }
    void resetNavigationForCurrentSignal();

    // void navigateToTime(int targetTime);
    int findEventIndexForTime(int time, const QString &signalFullName) const;

    bool isSignalSelected(const VCDSignal &signal) const
    {
        for (int i = 0; i < displayItems.size(); i++)
        {
            if (selectedItems.contains(i) &&
                displayItems[i].type == DisplayItem::Signal &&
                displayItems[i].signal.signal.fullName == signal.fullName)
            {
                return true;
            }
        }
        return false;
    }
    int selectedLineWidth = 3;

    // Navigation
    QMap<QString, QVector<int>> signalEventTimestamps; // Maps signal fullName to its events
    QMap<QString, int> signalCurrentEventIndex;        // Maps signal fullName to its current event index
    QString currentlyNavigatedSignal;                  // Which signal we're currently navigating
    NavigationMode navigationMode = ValueChange;
    int currentEventIndex = -1;
    QVector<int> eventTimestamps;

    void updateEventList();
    int findEventIndexForTime(int time) const;
    int getCurrentEventTime() const;

    // Signal selection from waveform area
    void handleWaveformClick(const QPoint &pos);
    // Track which signals have been loaded to avoid reloading
    QSet<QString> loadedSignalIdentifiers;

    // Signal data cache with limits
    QMap<QString, QVector<VCDValueChange>> signalDataCache;
    const int MAX_CACHED_SIGNALS = 1000; // Limit cache size
    QStringList recentlyUsedSignals;     // For LRU cache management

    // Make sure these search methods exist:
    void handleSearchInput(const QString &text);
    void updateSearchResults();
    void applySearchFilter();
    // Add these to the private section of WaveformWidget class
    int signalHeight = 24; // Configurable signal height for both signals and buses
    int lineWidth = 1;     // Configurable line width

    // Helper methods for virtual rendering
    int calculateTotalHeight() const;
    void updateCursorTime(const QPoint &pos);
    void drawSignalNamesColumn(QPainter &painter);
    void drawSignalValuesColumn(QPainter &painter, int cursorTime);
    void drawWaveformArea(QPainter &painter);
    void drawTimeCursor(QPainter &painter);
    void drawGrid(QPainter &painter);
    void drawSignals(QPainter &painter);
    void drawSignalWaveform(QPainter &painter, const VCDSignal &signal, int yPos);
    void drawBusWaveform(QPainter &painter, const VCDSignal &signal, int yPos);
    void updateScrollBar();
    int timeToX(int time) const;
    int xToTime(int x) const;
    QString getSignalValueAtTime(const QString &identifier, int time) const;
    QString getBusValueAtTime(const QString &identifier, int time) const;
    int calculateTimeStep(int startTime, int endTime) const;
    int getItemAtPosition(const QPoint &pos) const;
    int getItemYPosition(int index) const;
    void showContextMenu(const QPoint &pos, int itemIndex);
    void addSpaceAbove(int index);
    void addSpaceBelow(int index);
    void renameItem(int itemIndex);
    QString promptForName(const QString &title, const QString &defaultName = "");
    void drawCleanTransition(QPainter &painter, int x, int top, int bottom, const QColor &signalColor);

    // Color management
    void changeSignalColor(int itemIndex);
    QColor getSignalColor(const QString &identifier) const;

    // Splitter handling
    bool isOverNamesSplitter(const QPoint &pos) const;
    bool isOverValuesSplitter(const QPoint &pos) const;
    void updateSplitterPositions();

    // Search functionality
    QString searchText;
    bool isSearchActive = false;
    bool isSearchFocused = false;
    QSet<int> searchResults;
    void drawSearchBar(QPainter &painter);

    // Drag and movement
    void startDrag(int itemIndex);
    void performDrag(int mouseY);
    void moveItem(int itemIndex, int newIndex);

    // Selection
    void handleMultiSelection(int itemIndex, QMouseEvent *event);

    // Helper methods
    bool isSignalItem(int index) const
    {
        return index >= 0 && index < displayItems.size() && displayItems[index].type == DisplayItem::Signal;
    }
    bool isSpaceItem(int index) const
    {
        return index >= 0 && index < displayItems.size() && displayItems[index].type == DisplayItem::Space;
    }
    VCDSignal getSignalFromItem(int index) const
    {
        return isSignalItem(index) ? displayItems[index].signal.signal : VCDSignal();
    }

    // Bus display helpers
    QString formatBusValue(const QString &binaryValue) const;
    bool isValidBinary(const QString &value) const;
    QString binaryToHex(const QString &binaryValue) const;
    QString binaryToOctal(const QString &binaryValue) const;
    QString binaryToDecimal(const QString &binaryValue) const;

    VCDParser *vcdParser;

    // Layout parameters
    int signalNamesWidth = 250;
    int valuesColumnWidth = 120;
    double timeScale;
    int timeOffset;
    int timeMarkersHeight;
    int topMargin;

    // Display items
    QList<DisplayItem> displayItems;

    // Signal colors
    QMap<QString, QColor> signalColors;
    BusFormat busDisplayFormat = Hex;

    // Splitter state
    bool draggingNamesSplitter = false;
    bool draggingValuesSplitter = false;

    // Drag state
    bool isDragging;
    bool isDraggingItem;
    int dragStartX;
    int dragStartOffset;
    int dragItemIndex;
    int dragStartY;
    QPoint dragStartPos;

    // Selection state
    QSet<int> selectedItems;
    int lastSelectedItem;

    // Time cursor and values display
    int cursorTime = 0;
    bool showCursor = true;

    QScrollBar *horizontalScrollBar;
    QScrollBar *verticalScrollBar;
    int verticalOffset = 0;
};

#endif // WAVEFORMWIDGET_H